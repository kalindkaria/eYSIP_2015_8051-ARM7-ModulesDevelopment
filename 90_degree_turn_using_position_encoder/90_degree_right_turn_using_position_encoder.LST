C51 COMPILER V9.01   90_DEGREE_RIGHT_TURN_USING_POSITION_ENCOD                             06/12/2015 20:50:12 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE 90_DEGREE_RIGHT_TURN_USING_POSITION_ENCOD
OBJECT MODULE PLACED IN 90_degree_right_turn_using_position_encoder.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE 90_degree_right_turn_using_position_encoder.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          * Author: Bhumika Varshney, ERTS Lab, IIT Bombay
   3          * File name: 90_degree_right_turn_using_position_encoder.c
   4          * Functions: int1_setup(), right(), stop()
   5          * Global variable: left_velocity, right_velocity, LF, LB, RF, RB, left_shaft_count, reqd_shaft_count, dist
             -ance
   6          * This experiment demonstrates 90 degree right turn experiment using position encoders.
   7          * Concepts covered: Position Encoders 
   8            
   9           Note: 
  10           1. Make sure that in the configuration options following settings are 
  11           done for proper operation of the code
  12            Microcontroller: P89V51RD2
  13           Frequency: 11.0592 MHz                                                            
  14          2.  Coding Standards followed(For further reference on Coding Standards go to portal link).
  15          **********************************************************************************************************
             -********/
  16          #include <intrins.h>
  17          #include "p89v51rx2.H"
  18          #include"lcd_display.h"
  19          //program specific declarations
  20          sbit LB=P1^0;       //LEFT BACK Pin.
  21          sbit LF=P1^1;           //LEFT FRONT Pin.
  22          sbit RF=P1^2;           //RIGHT FRONT Pin.
  23          sbit RB=P3^4;           //RIGHT BACK Pin.
  24          
  25          sbit left_velocity=P1^3;  //Left velocity control pin. 
  26          sbit right_velocity=P1^4; //Right velocity control pin. 
  27          
  28          unsigned int left_shaft_count=0;//initialize a variable to store the count pulses of the left position enc
             -oder.
  29           unsigned int reqd_shaft_count_int=0;
  30          
  31          /****************************************************************************
  32          * Function: int1_setup
  33          * Input: none
  34          * Output: none
  35          * Logic: initialization routine for Interrupt 1 setup, initalisation of the
  36          *        Int 1 should be done in the same sequence as given in this function.
  37          *******************************************************************************/
  38          void int1_setup() 
  39          {
  40   1      TCON = 0x04; //Set Interrupt 1 trigger type to falling edge trigger.
  41   1      IEN0 = 0x84; //External Interrupt 1 Enable and Global Interrupt Enable. 
  42   1      
  43   1      P3 = 0x08; //set P3.3 (INT 1) as input port.
  44   1                         // Can also be written as INT1 = 0; (refer to p89v51rx2.H).
  45   1      }
  46          /************************************************************************
  47          * Function: Interrupt Service Routine
  48          * Input: none
  49          * Output: none
  50          * Logic: This is an Interrupt Service Routine for external interrut1, 
  51          *        whenever interrupt1 occurs it executes this routine and 
  52          *        after this it returns to the main function
C51 COMPILER V9.01   90_DEGREE_RIGHT_TURN_USING_POSITION_ENCOD                             06/12/2015 20:50:12 PAGE 2   

  53          ***************************************************************************/
  54          void int1_isr(void)interrupt 2     //ISR Routine for External Interrupt 1.
  55                                                                             //Refer to chapter 4 in the software manual (table 4.1)for syntax explanation.
  56          {
  57   1       left_shaft_count++;//when the slotted disc passes through the encoder pulses will be generated,each pulse
             - will generate an interrupt and the right shaft count value will be incremented.
  58   1       IE1 = 0; // When interrupt is processed it is cleared automatically by the hardware  or it can also be cl
             -eared by the software.
  59   1                        // Clearing IE1 flag to 0.    
  60   1      }
  61          /* Function name - right
  62          * Input - none 
  63          * Outut - turns the robot right
  64          * Logic - set appropriate bits high to turn right as per the logic table
  65          */ 
  66          void right(void)
  67          {
  68   1      RF=0;
  69   1      LF=1;
  70   1      RB=1;
  71   1      LB=0;
  72   1      }
  73          /* Function name - stop
  74          * Input - none 
  75          * Outut - stops the robot
  76          * Logic - set appropriate bits high to stop all motors as per the logic table
  77          */  
  78          
  79          void stop(void)
  80          {
  81   1      RF=0;
  82   1      LF=0;
  83   1      RB=0;
  84   1      LB=0;
  85   1      }
  86          /*
  87          * Function Name: main
  88          * Input: None
  89          * Output: int to inform the caller that the program exited correctly or incorrectly (C code standard)
  90          * Logic: initializes and enable the interrupts and calls functions to turn the robot for a desired
  91          *        angle accordingly 
  92          * Example Call: Called automatically by the Operating System
  93          *
  94          */
  95          void main()
  96          { 
  97   1              lcd_init();
  98   1              lcd_clear();
  99   1        int1_setup();//external linterrupt 1 initialization.    
 100   1       
 101   1       reqd_shaft_count_int=(unsigned int)(90/4.090); //This equation will calculate the count required for dist
             -ance to be travelled.
 102   1       lcd_print(1,1,reqd_shaft_count_int,2);
 103   1       
 104   1                                              
 105   1       left_velocity = 1;      //setting motor enable pins to 1
 106   1       right_velocity = 1; //setting motor enable pins to 1
 107   1       right();         //go forward                            
 108   1       while(left_shaft_count<reqd_shaft_count_int); //wait till desired distance is covered.
 109   1       lcd_print(1,5,left_shaft_count,2);
 110   1       stop();         //stop motor                   
 111   1       while(1);
C51 COMPILER V9.01   90_DEGREE_RIGHT_TURN_USING_POSITION_ENCOD                             06/12/2015 20:50:12 PAGE 3   

 112   1      }//main ends                
 113          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    803    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
