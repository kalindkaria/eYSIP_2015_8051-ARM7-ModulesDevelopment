<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\Rahul\Documents\Internship\PROJECT_ARM7\ARM7 based modules\Car Parking Theme\Theme.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\Rahul\Documents\Internship\PROJECT_ARM7\ARM7 based modules\Car Parking Theme\Theme.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Wed Jul 08 13:35:25 2015
<BR><P>
<H3>Maximum Stack Usage =         92 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; park &rArr; left_turn &rArr; LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[20ef568]">Reset_Handler</a>
 <LI><a href="#[20ef5a4]">__user_initial_stackheap</a>
 <LI><a href="#[20ef7c0]">Undef_Handler</a>
 <LI><a href="#[20ef784]">SWI_Handler</a>
 <LI><a href="#[20ef748]">PAbt_Handler</a>
 <LI><a href="#[20ef70c]">DAbt_Handler</a>
 <LI><a href="#[20ef6d0]">IRQ_Handler</a>
 <LI><a href="#[20ef694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20ef7c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20ef7c0]">Undef_Handler</a><BR>
 <LI><a href="#[20ef784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20ef784]">SWI_Handler</a><BR>
 <LI><a href="#[20ef748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20ef748]">PAbt_Handler</a><BR>
 <LI><a href="#[20ef70c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20ef70c]">DAbt_Handler</a><BR>
 <LI><a href="#[20ef6d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20ef6d0]">IRQ_Handler</a><BR>
 <LI><a href="#[20ef694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20ef694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20ef568]">Reset_Handler</a>
 <LI><a href="#[20ef7c0]">Undef_Handler</a>
 <LI><a href="#[20ef784]">SWI_Handler</a>
 <LI><a href="#[20ef748]">PAbt_Handler</a>
 <LI><a href="#[20ef70c]">DAbt_Handler</a>
 <LI><a href="#[20ef6d0]">IRQ_Handler</a>
 <LI><a href="#[20ef694]">FIQ_Handler</a>
 <LI><a href="#[20ec37c]">__main</a>
 <LI><a href="#[20ed3a8]">main</a>
 <LI><a href="#[20ed768]">IRQ_UART1</a>
 <LI><a href="#[20e6544]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20ef568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20ec37c]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[20e403c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[20eb404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[20e403c]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[20ec37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[20e4000]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20eb404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[20e3fc4]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[20e3e20]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e3e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[20e3e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[20e3d30]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[20e98d4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e72a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20ea720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[20e7930]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[20e79a8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[20e7d68]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[20e7c00]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[20e7840]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[20e78b8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[20e7c78]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[20e7b88]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[20e8164]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[20e7fc0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[20e7f48]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[20e7ed0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[20e7e58]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[20e7de0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[20e8074]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[20e7804]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[20e7cf0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[20e7b10]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[20e80ec]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[20e5914]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20e6f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[20e45dc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[20e43fc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[20e43c0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[20e4528]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[20e4690]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[20e44b0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[20eb404]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20e4000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[20ec37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[20ea7d4]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[20ea450]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[20ea0cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20ea720]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e98d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[20ea75c]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[20ea66c]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[20e9f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[20ea6a8]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[20e9064]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20e9f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[20e6f1c]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[20e5914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[20e6f58]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[20e6ee0]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20e7138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[20ef5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ea0cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20ee2e4]"></a>stop</STRONG> (ARM, 44 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
<LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20ee014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20ee140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_left
<LI><a href="#[20ee17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_right
<LI><a href="#[20ee2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motion_Pin
</UL>

<P><STRONG><a name="[20ee2a8]"></a>Init_Motion_Pin</STRONG> (ARM, 156 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init_Motion_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[20ee26c]"></a>forward</STRONG> (ARM, 60 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
<LI><a href="#[20edfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
</UL>

<P><STRONG><a name="[20ee230]"></a>backward</STRONG> (ARM, 60 bytes, Stack size 0 bytes, theme.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20edf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_mm
</UL>

<P><STRONG><a name="[20ee1f4]"></a>right</STRONG> (ARM, 72 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20edf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_Degrees
</UL>

<P><STRONG><a name="[20ee1b8]"></a>left</STRONG> (ARM, 72 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20edf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_Degrees
</UL>

<P><STRONG><a name="[20ee17c]"></a>soft_right</STRONG> (ARM, 36 bytes, Stack size 4 bytes, theme.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20edeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right_Degrees
</UL>

<P><STRONG><a name="[20ee140]"></a>soft_left</STRONG> (ARM, 36 bytes, Stack size 4 bytes, theme.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20edee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left_Degrees
</UL>

<P><STRONG><a name="[20ee104]"></a>Init_PWM</STRONG> (ARM, 148 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[20ee0c8]"></a>UpdateLeftPWM</STRONG> (ARM, 24 bytes, Stack size 0 bytes, theme.o(.text), UNUSED)

<P><STRONG><a name="[20ee08c]"></a>UpdateRightPWM</STRONG> (ARM, 24 bytes, Stack size 0 bytes, theme.o(.text), UNUSED)

<P><STRONG><a name="[20ee050]"></a>Angle_Rotate</STRONG> (ARM, 192 bytes, Stack size 40 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Angle_Rotate &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20eb4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[20eb800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[20eba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20ebf08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20ec214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20edeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right_Degrees
<LI><a href="#[20edee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left_Degrees
<LI><a href="#[20edf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_Degrees
<LI><a href="#[20edf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_Degrees
</UL>

<P><STRONG><a name="[20ee014]"></a>Linear_Distance_mm</STRONG> (ARM, 128 bytes, Stack size 32 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Linear_Distance_mm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20eb800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[20ebb84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[20ebf08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20ec214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20edf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_mm
<LI><a href="#[20edfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
</UL>

<P><STRONG><a name="[20edfd8]"></a>Forward_mm</STRONG> (ARM, 28 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Forward_mm &rArr; Linear_Distance_mm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20ee014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20ee26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
<LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
</UL>

<P><STRONG><a name="[20edf9c]"></a>Back_mm</STRONG> (ARM, 28 bytes, Stack size 8 bytes, theme.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ee014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20ee230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backward
</UL>

<P><STRONG><a name="[20edf60]"></a>Left_Degrees</STRONG> (ARM, 28 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Left_Degrees &rArr; Angle_Rotate &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20ee1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
</UL>

<P><STRONG><a name="[20edf24]"></a>Right_Degrees</STRONG> (ARM, 28 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Right_Degrees &rArr; Angle_Rotate &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20ee1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
</UL>

<P><STRONG><a name="[20edee8]"></a>Soft_Left_Degrees</STRONG> (ARM, 32 bytes, Stack size 8 bytes, theme.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20ee140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_left
</UL>

<P><STRONG><a name="[20edeac]"></a>Soft_Right_Degrees</STRONG> (ARM, 32 bytes, Stack size 8 bytes, theme.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20ee17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_right
</UL>

<P><STRONG><a name="[20ede70]"></a>IRQ_Eint0</STRONG> (ARM, 92 bytes, Stack size 8 bytes, theme.o(.text), UNUSED)

<P><STRONG><a name="[20ede34]"></a>IRQ_Eint3</STRONG> (ARM, 52 bytes, Stack size 8 bytes, theme.o(.text), UNUSED)

<P><STRONG><a name="[20eddf8]"></a>Ext_INT_Setup</STRONG> (ARM, 124 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[20eddbc]"></a>Init_LCD_Pin</STRONG> (ARM, 48 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[20edd80]"></a>DelaymSec</STRONG> (ARM, 44 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
<LI><a href="#[20ed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz
<LI><a href="#[20ed7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led
<LI><a href="#[20edccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data
<LI><a href="#[20edd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_4Bit_Mode
<LI><a href="#[20edd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Command
</UL>

<P><STRONG><a name="[20edd44]"></a>LCD_Command</STRONG> (ARM, 188 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20edd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaymSec
</UL>
<BR>[Called By]<UL><LI><a href="#[20edba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cursor
<LI><a href="#[20edbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Home
<LI><a href="#[20edc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
<LI><a href="#[20edc54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[20edc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[20edd08]"></a>LCD_4Bit_Mode</STRONG> (ARM, 376 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_4Bit_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[20edd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaymSec
</UL>
<BR>[Called By]<UL><LI><a href="#[20edc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[20edccc]"></a>LCD_Data</STRONG> (ARM, 188 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[20edd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaymSec
</UL>
<BR>[Called By]<UL><LI><a href="#[20edb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Print
<LI><a href="#[20edc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_String
</UL>

<P><STRONG><a name="[20edc90]"></a>LCD_Init</STRONG> (ARM, 40 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Init &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20edd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_4Bit_Mode
<LI><a href="#[20edd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20edc54]"></a>LCD_Clear</STRONG> (ARM, 20 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Clear &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20edd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20edc18]"></a>LCD_String</STRONG> (ARM, 52 bytes, Stack size 8 bytes, theme.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20edccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data
<LI><a href="#[20edd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Command
</UL>

<P><STRONG><a name="[20edbdc]"></a>LCD_Home</STRONG> (ARM, 20 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Home &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20edd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[20edb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Print
</UL>

<P><STRONG><a name="[20edba0]"></a>LCD_Cursor</STRONG> (ARM, 84 bytes, Stack size 12 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20edd44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[20edb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Print
</UL>

<P><STRONG><a name="[20edb64]"></a>LCD_Print</STRONG> (ARM, 364 bytes, Stack size 48 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20ecd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20edba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Cursor
<LI><a href="#[20edbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Home
<LI><a href="#[20edccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
<LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
</UL>

<P><STRONG><a name="[20edb28]"></a>Init_ADC_Pin</STRONG> (ARM, 80 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[20edaec]"></a>Init_ADC0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[20edab0]"></a>Init_ADC1</STRONG> (ARM, 16 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[20eda74]"></a>AD0_Conversion</STRONG> (ARM, 128 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
</UL>

<P><STRONG><a name="[20eda38]"></a>AD1_Conversion</STRONG> (ARM, 128 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
</UL>

<P><STRONG><a name="[20ed9fc]"></a>SPI0_Init</STRONG> (ARM, 100 bytes, Stack size 0 bytes, theme.o(.text), UNUSED)

<P><STRONG><a name="[20ed9c0]"></a>SPI0_Send</STRONG> (ARM, 80 bytes, Stack size 0 bytes, theme.o(.text), UNUSED)

<P><STRONG><a name="[20ed984]"></a>SPI0_ReceiveByte</STRONG> (ARM, 48 bytes, Stack size 0 bytes, theme.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20ed948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_Receive
</UL>

<P><STRONG><a name="[20ed948]"></a>SPI0_Receive</STRONG> (ARM, 52 bytes, Stack size 12 bytes, theme.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ed984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_ReceiveByte
</UL>

<P><STRONG><a name="[20ed90c]"></a>SPI1_Init</STRONG> (ARM, 152 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[20ed8d0]"></a>SPI1_SendByte</STRONG> (ARM, 44 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEGA8_ADCRead
</UL>

<P><STRONG><a name="[20ed894]"></a>SPI1_ReceiveByte</STRONG> (ARM, 48 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEGA8_ADCRead
</UL>

<P><STRONG><a name="[20ed858]"></a>delay_ms</STRONG> (ARM, 72 bytes, Stack size 16 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[20ecd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
</UL>

<P><STRONG><a name="[20ed81c]"></a>Init_Buzzer_Pin</STRONG> (ARM, 80 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[20ed7e0]"></a>Init_Led_Pin</STRONG> (ARM, 72 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
<LI><a href="#[20ed7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led
</UL>

<P><STRONG><a name="[20ed7a4]"></a>Led</STRONG> (ARM, 48 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Led_Pin
<LI><a href="#[20edd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaymSec
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
<LI><a href="#[20ed768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_UART1
</UL>

<P><STRONG><a name="[20ed768]"></a>IRQ_UART1</STRONG> (ARM, 1080 bytes, Stack size 20 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_UART1 &rArr; Led
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led
</UL>
<BR>[Address Reference Count : 1]<UL><LI> theme.o(.text)
</UL>
<P><STRONG><a name="[20ed72c]"></a>Init_UART1</STRONG> (ARM, 124 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[20ed6f0]"></a>UART1_SendByte</STRONG> (ARM, 32 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
<LI><a href="#[20ed6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendStr
</UL>

<P><STRONG><a name="[20ed6b4]"></a>UART1_SendStr</STRONG> (ARM, 52 bytes, Stack size 4 bytes, theme.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
</UL>

<P><STRONG><a name="[20ed678]"></a>velocity</STRONG> (ARM, 40 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
</UL>

<P><STRONG><a name="[20ed63c]"></a>Init_Ports</STRONG> (ARM, 40 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Ports &rArr; Init_Motion_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UART1
<LI><a href="#[20ed7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Led_Pin
<LI><a href="#[20ed81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer_Pin
<LI><a href="#[20edb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC_Pin
<LI><a href="#[20eddbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD_Pin
<LI><a href="#[20eddf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_INT_Setup
<LI><a href="#[20ee2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motion_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[20ed600]"></a>Init_Sensor_Switch_Pin</STRONG> (ARM, 48 bytes, Stack size 0 bytes, theme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ed588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[20ed5c4]"></a>MEGA8_ADCRead</STRONG> (ARM, 124 bytes, Stack size 12 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MEGA8_ADCRead
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReceiveByte
<LI><a href="#[20ed8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
</UL>

<P><STRONG><a name="[20ed588]"></a>Init_Peripherals</STRONG> (ARM, 36 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Init_Peripherals &rArr; Init_Ports &rArr; Init_Motion_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Sensor_Switch_Pin
<LI><a href="#[20ed63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
<LI><a href="#[20ed90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[20edab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC1
<LI><a href="#[20edaec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC0
<LI><a href="#[20ee104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20ed54c]"></a>node</STRONG> (ARM, 512 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = node &rArr; LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity
<LI><a href="#[20eda38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_Conversion
<LI><a href="#[20eda74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD0_Conversion
<LI><a href="#[20edb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Print
<LI><a href="#[20ee26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
<LI><a href="#[20ed45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reach
</UL>

<P><STRONG><a name="[20ed510]"></a>right_turn</STRONG> (ARM, 268 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = right_turn &rArr; LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity
<LI><a href="#[20ed858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[20eda38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_Conversion
<LI><a href="#[20eda74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD0_Conversion
<LI><a href="#[20edb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Print
<LI><a href="#[20edf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_Degrees
<LI><a href="#[20edfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
<LI><a href="#[20ee1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right
<LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reach
</UL>

<P><STRONG><a name="[20ed4d4]"></a>left_turn</STRONG> (ARM, 268 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = left_turn &rArr; LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity
<LI><a href="#[20ed858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[20eda38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD1_Conversion
<LI><a href="#[20eda74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD0_Conversion
<LI><a href="#[20edb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Print
<LI><a href="#[20edf60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_Degrees
<LI><a href="#[20edfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
<LI><a href="#[20ee1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left
<LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reach
</UL>

<P><STRONG><a name="[20ed498]"></a>buzz</STRONG> (ARM, 44 bytes, Stack size 4 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = buzz
</UL>
<BR>[Calls]<UL><LI><a href="#[20edd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaymSec
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
</UL>

<P><STRONG><a name="[20ed45c]"></a>reach</STRONG> (ARM, 52 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = reach &rArr; left_turn &rArr; LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20ed420]"></a>detect</STRONG> (ARM, 584 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = detect &rArr; node &rArr; LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz
<LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
<LI><a href="#[20ed5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEGA8_ADCRead
<LI><a href="#[20ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
<LI><a href="#[20ed7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led
<LI><a href="#[20edb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Print
<LI><a href="#[20edd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaymSec
<LI><a href="#[20edfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
<LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20ed3e4]"></a>park</STRONG> (ARM, 188 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = park &rArr; left_turn &rArr; LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzz
<LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
<LI><a href="#[20ed7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led
<LI><a href="#[20ed858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[20edfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
<LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20ed3a8]"></a>main</STRONG> (ARM, 224 bytes, Stack size 8 bytes, theme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = main &rArr; park &rArr; left_turn &rArr; LCD_Print &rArr; LCD_Cursor &rArr; LCD_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[20ed3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;park
<LI><a href="#[20ed420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect
<LI><a href="#[20ed45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reach
<LI><a href="#[20ed4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_turn
<LI><a href="#[20ed510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right_turn
<LI><a href="#[20ed54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node
<LI><a href="#[20ed588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
<LI><a href="#[20ed678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;velocity
<LI><a href="#[20ed6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
<LI><a href="#[20edc54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[20edc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[20edd80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelaymSec
<LI><a href="#[20edfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
<LI><a href="#[20ee2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[20ece44]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[20ece08]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[20ec4e4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20ec4a8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20ec46c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20ea0cc]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[20e9154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[20ef5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[20ea450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[20e9f64]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20e9064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[20e9eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[20ea66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[20e9190]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[20e9154]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ea0cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20e9118]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[20e7138]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e6ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[20e6c10]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e72a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[20e6544]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[20e6508]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[20ecdcc]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[20ecd90]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[20ece80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[20ecebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[20ecef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[20ed858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[20edb64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Print
</UL>

<P><STRONG><a name="[20ec214]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Called By]<UL><LI><a href="#[20ee014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20ec1d8]"></a>_d2f</STRONG> (ARM, 168 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20eae64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[20ec0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[20ec19c]"></a>__fpl_inf_d2f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, d2f.o(x$fpl$d2f), UNUSED)

<P><STRONG><a name="[20eaf90]"></a>__fpl_dcheck_NaN2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck.o(x$fpl$dcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ea1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[20ebecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[20eae64]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ea1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[20ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[20ebf08]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[20ee014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20ebecc]"></a>_ddiv</STRONG> (ARM, 464 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20eaf90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[20ebe54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv_mantissas
<LI><a href="#[20ec0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[20ebe90]"></a>__fpl_inf_ddiv</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ddiv.o(x$fpl$ddiv), UNUSED)

<P><STRONG><a name="[20ebe54]"></a>_ddiv_mantissas</STRONG> (ARM, 380 bytes, Stack size 20 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20ebecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[20ebc38]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[20ebbfc]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[20ebbc0]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20ebb48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[20ebb84]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[20ee014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
</UL>

<P><STRONG><a name="[20ebb48]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ebbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[20ead74]"></a>__dunder</STRONG> (ARM, 276 bytes, Stack size 4 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[20ead38]"></a>__dunder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[20eba58]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Called By]<UL><LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20eba1c]"></a>_f2d</STRONG> (ARM, 96 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20eac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[20ec0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[20eb9e0]"></a>__fpl_inf_f2d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, f2d.o(x$fpl$f2d), UNUSED)

<P><STRONG><a name="[20eac48]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ea1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[20eb7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[20eba1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[20eb800]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Called By]<UL><LI><a href="#[20ee014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20eb7c4]"></a>_ffixu</STRONG> (ARM, 92 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20eac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[20ec0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[20eb788]"></a>__fpl_inf_ffixu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ffixu.o(x$fpl$ffixu), UNUSED)

<P><STRONG><a name="[20eb5a8]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[20eb56c]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[20eb530]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20eb4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[20eb4f4]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[20ee050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20eb4b8]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20eb530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[20e72a0]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e6c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[20e98d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[20e7264]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[20eab58]"></a>__funder</STRONG> (ARM, 144 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[20eab1c]"></a>__funder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[20ea1f8]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e9334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[20eac48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[20eae64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[20eaf90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[20e9334]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20ea1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[20eaa68]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[20ef7c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20ef7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20ef7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20ef784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20ef784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20ef784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20ef748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20ef748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20ef748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20ef70c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20ef70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20ef70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20ef6d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20ef6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20ef6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20ef694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20ef694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20ef694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20ecef8]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ecd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[20ecebc]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ecd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[20ece80]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20ecd90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[20ec0ac]"></a>__fpl_infinity</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20eb7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[20eba1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[20ebecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[20ec1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[20e9eec]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20e9f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
