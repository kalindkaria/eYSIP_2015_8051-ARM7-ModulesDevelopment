<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [H:\Pos_encoder\Pos_en coder1\Pos_encoder1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image H:\Pos_encoder\Pos_en coder1\Pos_encoder1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Wed Jul 01 00:26:58 2015
<BR><P>
<H3>Maximum Stack Usage =         64 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Forward_mm &rArr; Linear_Distance_mm &rArr; __aeabi_ddiv
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[20df568]">Reset_Handler</a>
 <LI><a href="#[20df5a4]">__user_initial_stackheap</a>
 <LI><a href="#[20df7c0]">Undef_Handler</a>
 <LI><a href="#[20df784]">SWI_Handler</a>
 <LI><a href="#[20df748]">PAbt_Handler</a>
 <LI><a href="#[20df70c]">DAbt_Handler</a>
 <LI><a href="#[20df6d0]">IRQ_Handler</a>
 <LI><a href="#[20df694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20df7c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20df7c0]">Undef_Handler</a><BR>
 <LI><a href="#[20df784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20df784]">SWI_Handler</a><BR>
 <LI><a href="#[20df748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20df748]">PAbt_Handler</a><BR>
 <LI><a href="#[20df70c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20df70c]">DAbt_Handler</a><BR>
 <LI><a href="#[20df6d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20df6d0]">IRQ_Handler</a><BR>
 <LI><a href="#[20df694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20df694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20df568]">Reset_Handler</a>
 <LI><a href="#[20df7c0]">Undef_Handler</a>
 <LI><a href="#[20df784]">SWI_Handler</a>
 <LI><a href="#[20df748]">PAbt_Handler</a>
 <LI><a href="#[20df70c]">DAbt_Handler</a>
 <LI><a href="#[20df6d0]">IRQ_Handler</a>
 <LI><a href="#[20df694]">FIQ_Handler</a>
 <LI><a href="#[20de44c]">__main</a>
 <LI><a href="#[20de9b0]">main</a>
 <LI><a href="#[20d8c68]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20df568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20de44c]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[20d6634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[20dd4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[20d6634]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[20de44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[20d65f8]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dd4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[20d65bc]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[20d6418]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d6418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d6418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[20d6328]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[20dbf80]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d9cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20dca0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[20da360]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[20da3d8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[20da798]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[20da630]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[20da270]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[20da2e8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[20da6a8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[20da5b8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[20dab94]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[20da9f0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[20da978]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[20da900]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[20da888]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[20da810]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[20daaa4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[20da234]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[20da720]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[20da540]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[20dab1c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[20d8fb0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20d9a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[20d8344]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[20d8164]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[20d8128]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[20d8290]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[20d83f8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[20d8218]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[20dd4d4]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20d65f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[20de44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[20dcac0]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[20dc73c]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[20dc4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20dca0c]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20dbf80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[20dca48]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[20dc958]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[20dc37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[20dc994]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[20db710]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20dc37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[20d9a78]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[20d8fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[20d9ab4]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[20d9a3c]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20d949c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[20df5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20dc4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20deed8]"></a>DelaymSec</STRONG> (ARM, 44 bytes, Stack size 0 bytes, pos_encoder1.o(.text), UNUSED)

<P><STRONG><a name="[20dee9c]"></a>stop</STRONG> (ARM, 44 bytes, Stack size 0 bytes, pos_encoder1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20de9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20dec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20decf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right
<LI><a href="#[20ded34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left
<LI><a href="#[20dee60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motion_Pin
</UL>

<P><STRONG><a name="[20dee60]"></a>Init_Motion_Pin</STRONG> (ARM, 168 bytes, Stack size 4 bytes, pos_encoder1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init_Motion_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[20dee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20dea28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
</UL>

<P><STRONG><a name="[20dee24]"></a>forward</STRONG> (ARM, 60 bytes, Stack size 0 bytes, pos_encoder1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20dec44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
</UL>

<P><STRONG><a name="[20dede8]"></a>backward</STRONG> (ARM, 60 bytes, Stack size 0 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20dec08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_mm
</UL>

<P><STRONG><a name="[20dedac]"></a>right</STRONG> (ARM, 72 bytes, Stack size 0 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20deb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_Degrees
</UL>

<P><STRONG><a name="[20ded70]"></a>left</STRONG> (ARM, 72 bytes, Stack size 0 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20debcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_Degrees
</UL>

<P><STRONG><a name="[20ded34]"></a>Soft_Left</STRONG> (ARM, 28 bytes, Stack size 4 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20deb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left_Degrees
</UL>

<P><STRONG><a name="[20decf8]"></a>Soft_Right</STRONG> (ARM, 28 bytes, Stack size 4 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20deb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right_Degrees
</UL>

<P><STRONG><a name="[20decbc]"></a>Angle_Rotate</STRONG> (ARM, 192 bytes, Stack size 40 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dd5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[20dd8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[20ddb28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20ddfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20de2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20dee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20deb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right_Degrees
<LI><a href="#[20deb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left_Degrees
<LI><a href="#[20deb90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Right_Degrees
<LI><a href="#[20debcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Left_Degrees
</UL>

<P><STRONG><a name="[20dec80]"></a>Linear_Distance_mm</STRONG> (ARM, 128 bytes, Stack size 32 bytes, pos_encoder1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Linear_Distance_mm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20dd8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[20ddc54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[20ddfd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[20de2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20dee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Called By]<UL><LI><a href="#[20dec08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_mm
<LI><a href="#[20dec44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
</UL>

<P><STRONG><a name="[20dec44]"></a>Forward_mm</STRONG> (ARM, 28 bytes, Stack size 8 bytes, pos_encoder1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Forward_mm &rArr; Linear_Distance_mm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20dec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20dee24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward
</UL>
<BR>[Called By]<UL><LI><a href="#[20de9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20dec08]"></a>Back_mm</STRONG> (ARM, 28 bytes, Stack size 8 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20dede8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backward
</UL>

<P><STRONG><a name="[20debcc]"></a>Left_Degrees</STRONG> (ARM, 28 bytes, Stack size 8 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20ded70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left
</UL>

<P><STRONG><a name="[20deb90]"></a>Right_Degrees</STRONG> (ARM, 28 bytes, Stack size 8 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20dedac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;right
</UL>

<P><STRONG><a name="[20deb54]"></a>Soft_Left_Degrees</STRONG> (ARM, 32 bytes, Stack size 8 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20ded34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Left
</UL>

<P><STRONG><a name="[20deb18]"></a>Soft_Right_Degrees</STRONG> (ARM, 32 bytes, Stack size 8 bytes, pos_encoder1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
<LI><a href="#[20decf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Soft_Right
</UL>

<P><STRONG><a name="[20deadc]"></a>IRQ_Eint0</STRONG> (ARM, 96 bytes, Stack size 8 bytes, pos_encoder1.o(.text), UNUSED)

<P><STRONG><a name="[20deaa0]"></a>IRQ_Eint3</STRONG> (ARM, 52 bytes, Stack size 8 bytes, pos_encoder1.o(.text), UNUSED)

<P><STRONG><a name="[20dea64]"></a>Ext_INT_Setup</STRONG> (ARM, 124 bytes, Stack size 0 bytes, pos_encoder1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20de9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[20dea28]"></a>Init_Ports</STRONG> (ARM, 16 bytes, Stack size 4 bytes, pos_encoder1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_Ports &rArr; Init_Motion_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[20dee60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Motion_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[20de9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
</UL>

<P><STRONG><a name="[20de9ec]"></a>Init_Peripherals</STRONG> (ARM, 20 bytes, Stack size 4 bytes, pos_encoder1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Init_Peripherals &rArr; Init_Ports &rArr; Init_Motion_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[20dea28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ports
<LI><a href="#[20dea64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_INT_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[20de9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20de9b0]"></a>main</STRONG> (ARM, 44 bytes, Stack size 8 bytes, pos_encoder1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = main &rArr; Forward_mm &rArr; Linear_Distance_mm &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20de9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Peripherals
<LI><a href="#[20dec44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Forward_mm
<LI><a href="#[20dee9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[20de5b4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20de578]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20de53c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[20dc4e4]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[20db800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[20df5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[20dc73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[20dc37c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20db710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[20dc304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[20dc958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[20db83c]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[20db800]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20dc4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20db7c4]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[20d9730]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d9cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[20d949c]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d9a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[20d8c68]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[20d8c2c]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[20de2e4]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Called By]<UL><LI><a href="#[20dec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20de2a8]"></a>_d2f</STRONG> (ARM, 168 bytes, Stack size 0 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dd150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[20de17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[20de26c]"></a>__fpl_inf_d2f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, d2f.o(x$fpl$d2f), UNUSED)

<P><STRONG><a name="[20dd27c]"></a>__fpl_dcheck_NaN2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck.o(x$fpl$dcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dc610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[20ddf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[20dd150]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dc610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[20de2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[20ddfd8]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[20dec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20ddf9c]"></a>_ddiv</STRONG> (ARM, 464 bytes, Stack size 16 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dd27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[20ddf24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv_mantissas
<LI><a href="#[20de17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[20ddf60]"></a>__fpl_inf_ddiv</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ddiv.o(x$fpl$ddiv), UNUSED)

<P><STRONG><a name="[20ddf24]"></a>_ddiv_mantissas</STRONG> (ARM, 380 bytes, Stack size 20 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20ddf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[20ddd08]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[20ddccc]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[20ddc90]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20ddc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[20ddc54]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[20dec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
</UL>

<P><STRONG><a name="[20ddc18]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20ddc90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[20dd060]"></a>__dunder</STRONG> (ARM, 276 bytes, Stack size 4 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[20dd024]"></a>__dunder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, dunder.o(x$fpl$dunder), UNUSED)

<P><STRONG><a name="[20ddb28]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20ddaec]"></a>_f2d</STRONG> (ARM, 96 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dcf34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[20de17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[20ddab0]"></a>__fpl_inf_f2d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, f2d.o(x$fpl$f2d), UNUSED)

<P><STRONG><a name="[20dcf34]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dc610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[20dd894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[20ddaec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[20dd8d0]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Called By]<UL><LI><a href="#[20dec80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_Distance_mm
<LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20dd894]"></a>_ffixu</STRONG> (ARM, 92 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dcf34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[20de17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_infinity (Weak Reference)
</UL>

<P><STRONG><a name="[20dd858]"></a>__fpl_inf_ffixu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, ffixu.o(x$fpl$ffixu), UNUSED)

<P><STRONG><a name="[20dd678]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[20dd63c]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[20dd600]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20dd588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[20dd5c4]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20decbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle_Rotate
</UL>

<P><STRONG><a name="[20dd588]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20dd600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[20d9cd0]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d9730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[20dbf80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[20d9c94]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[20dce44]"></a>__funder</STRONG> (ARM, 144 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[20dce08]"></a>__funder_d</STRONG> (ARM, 4 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[20dc610]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20db9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[20dcf34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[20dd150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[20dd27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[20db9e0]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20dc610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[20dcd54]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[20df7c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20df7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20df7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20df784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20df784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20df784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20df748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20df748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20df748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20df70c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20df70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20df70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20df6d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20df6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20df6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20df694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20df694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20df694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[20de17c]"></a>__fpl_infinity</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20dd894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[20ddaec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[20ddf9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[20de2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[20dc304]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20dc37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
