C51 COMPILER V9.01   SERIAL_ROBOT_CONTROL                                                  06/10/2015 19:57:56 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE SERIAL_ROBOT_CONTROL
OBJECT MODULE PLACED IN serial_robot_control.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE serial_robot_control.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          * Author: Bhumika Varshney, ERTS Lab, IIT Bombay
   3          * File name: serial_robot_control.c
   4          * Functions: uart_setup(), RxData(), forward(), backward(), right(), left(), stop()
   5          * Global variable: unsigned char rx_data, left_velocity, right_velocity, LB, LF, RF, RB 
   6          * This experiment demonstrates wired serial communication between computer and the robot.
   7          * Concepts covered: USB to serial communication 
   8            
   9           Note: 
  10           1. Make sure that in the configuration options following settings are 
  11           done for proper operation of the code
  12            Microcontroller: P89V51RD2
  13           Frequency: 11.0592 MHz
  14           2. Make sure that jumpers are properly connected to select between RS232 and Wireless communication mode.
  15           3.Zigbee module must be properly configured prior to their use.                                                                   
  16          4.  Coding Standards followed(For further reference on Coding Standards go to portal link).
  17          **********************************************************************************************************
             -***/
  18          #include <intrins.h>
  19          #include "p89v51rx2.H"
  20          #include"lcd_display.h"
  21          
  22          unsigned char rx_data;
  23          sbit left_velocity=P1^3;
  24          sbit right_velocity=P1^4;
  25          sbit LB=P1^0;
  26          sbit LF=P1^1;
  27          sbit RF=P1^2;
  28          sbit RB=P3^4;
  29          
  30          /**************************************************************************
  31                  Function: uart_setup()
  32                  Input: none
  33                  Output: desired baud rate 
  34                  Description: This function configures Timer1 for generating the Baudrate.
  35                                       The TH1 register should be written with following hex numbers
  36                                   for desired baud rate. After setting the baudrate, SCON register
  37                                       for enabling Rx and setting up the frame format.
  38                  
  39                                   9600 ----->  0xFD
  40                                       4800 ----->  0xFA
  41                                       2400 ----->  0xF4
  42                                       1200 ----->  0xE8
  43          
  44          **************************************************************************/
  45          void uart_setup()
  46          {
  47   1              IEN0=0x90;                      //enable serial interrupt
  48   1          TMOD = 0x20;                // configure timer1 for Mode 2 operation for the correct baud rate 
  49   1          TH1 = 0xFD;         // 9600 bps for 11.0592 MHz clock 
  50   1          TCON = 0x40;        // Start timer 1 by setting TR1 = 1 
  51   1          SCON = 0x50;                // Set Serial IO to receive and normal mode 
  52   1              RI=0;               //Receive Interrupt Flag is cleared
  53   1              TI=0;                           //Tx interrupt flag is cleared
  54   1      }                                
C51 COMPILER V9.01   SERIAL_ROBOT_CONTROL                                                  06/10/2015 19:57:56 PAGE 2   

  55          
  56          /***************************************************************************
  57                  Function: void char RxData()
  58                  Input: none
  59                  output: recieved data byte
  60                  Description: This function copies any data that is present in the SBUF 
  61                                       register and returns it to the calling function.
  62          ***************************************************************************/
  63          
  64           unsigned char RxData()
  65          {
  66   1          unsigned char rcv_data;
  67   1              rcv_data = (unsigned char)SBUF;  //if any data is available copy it from SBUF
  68   1              return rcv_data;      //return the received data
  69   1      }
  70           /* Function name - forward
  71          * Input - none 
  72          * Outut - moves the robot in forward direction
  73          * Logic - set appropriate bits high to move forward as per the logic table
  74          */
  75          void forward(void) //go forward
  76          {
  77   1      RF=1;
  78   1      LF=1;
  79   1      RB=0;
  80   1      LB=0;
  81   1      }
  82          /* Function name - backward
  83          * Input - none 
  84          * Outut - moves the robot in backward direction
  85          * Logic - set appropriate bits high to move backward as per the logic table
  86          */
  87          void backward(void) //go backward
  88          {
  89   1      RF=0;
  90   1      LF=0;
  91   1      RB=1;
  92   1      LB=1;
  93   1      }
  94          /* Function name - left
  95          * Input - none 
  96          * Outut - turns the robot in left direction
  97          * Logic - set appropriate bits high to turn left as per the logic table
  98          */
  99          void left(void) //go left ( hard left)
 100          {
 101   1      RF=1;
 102   1      LF=0;
 103   1      RB=0;
 104   1      LB=1;
 105   1      }
 106          /* Function name - right
 107          * Input - none 
 108          * Outut - turns the robot in right direction
 109          * Logic - set appropriate bits high to turn right as per the logic table
 110          */
 111          void right(void) //go right ( hard right)
 112          {
 113   1      RF=0;
 114   1      LF=1;
 115   1      RB=1;
 116   1      LB=0;
C51 COMPILER V9.01   SERIAL_ROBOT_CONTROL                                                  06/10/2015 19:57:56 PAGE 3   

 117   1      }
 118          /* Function name - stop
 119          * Input - none 
 120          * Outut - stops the robot
 121          * Logic - set appropriate bits high to stop all motors as per the logic table
 122          */
 123          void stop(void) //stop ( soft stop )
 124          {
 125   1      RF= 0;
 126   1      LF= 0;
 127   1      RB= 0;
 128   1      LB= 0;
 129   1      }
 130          /***************************************************************************
 131          * Function: Interrupt Service Routine
 132          * Input: none
 133          * Output: none
 134          * Logic: whenever serial interrupt occurs it executes this routine
 135          *        and after this it returns to the main function
 136          *        serial interrupt occurs whenever data is recieved or transmitted.
 137          ****************************************************************************/
 138          void serial_int_isr(void)interrupt 4
 139          {
 140   1              rx_data = RxData();  //get the received data
 141   1              datasend(rx_data);
 142   1              RI = 0;  //Clear receive interrupt. Must be cleared by the user.
 143   1              TI = 0; //Clear transmit interrupt. Must be cleared by the user.
 144   1              if (rx_data== 0x38)     
 145   1              buzzer=0;               //buzzer on
 146   1              if (rx_data == 0x39)
 147   1              buzzer = 1;             //buzzer off
 148   1              if(rx_data==0x30)
 149   1              forward();         //move forward
 150   1              if(rx_data==0x31)
 151   1              backward();             //move backward
 152   1              if(rx_data==0x32)
 153   1              right();          //turn right
 154   1              if(rx_data==0x33)
 155   1              left();           //turn left
 156   1              if(rx_data==0x34)
 157   1              stop();         //stop  
 158   1      }
 159          /*
 160          * Function Name: main
 161          * Input: None
 162          * Output: int to inform the caller that the program exited correctly or incorrectly (C code standard)
 163          * Logic: initializes UART communication
 164          * Example Call: Called automatically by the Operating System
 165          *
 166          */
 167          void main(void)
 168          {
 169   1              
 170   1              buzzer=1;
 171   1              uart_setup(); // calling the UART setup function
 172   1              lcd_init();     //initializes LCD
 173   1              lcd_clear();
 174   1              while(1); 
 175   1      } //main ends here


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.01   SERIAL_ROBOT_CONTROL                                                  06/10/2015 19:57:56 PAGE 4   

   CODE SIZE        =    875    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
