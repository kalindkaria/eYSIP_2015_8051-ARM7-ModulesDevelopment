C51 COMPILER V9.01   MAIN                                                                  06/03/2015 19:36:34 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*********************************************************************************************************
             -*****
   2                          Platform: Fire Bird V P89V51RD2
   3                          LCD Interfacing: String Display
   4                          Written by: Omkar Pradhan, NEX Robotics Pvt. Ltd.
   5                          Edited By: Sachitanand Malewar, NEX Robotics Pvt. Ltd.
   6                          Last Modification: 2009-12-08
   7                          This program initializes the LCD and displays text onto the screen
   8                          Compiled with: uVision3 V3.90; C Compiler: C51.Exe, V8.18
   9          **********************************************************************************************************
             -****/                
  10          
  11          /********************************************************************************
  12          
  13             Copyright (c) 2010, NEX Robotics Pvt. Ltd.                       -*- c -*-
  14             All rights reserved.
  15          
  16             Redistribution and use in source and binary forms, with or without
  17             modification, are permitted provided that the following conditions are met:
  18          
  19             * Redistributions of source code must retain the above copyright
  20               notice, this list of conditions and the following disclaimer.
  21          
  22             * Redistributions in binary form must reproduce the above copyright
  23               notice, this list of conditions and the following disclaimer in
  24               the documentation and/or other materials provided with the
  25               distribution.
  26          
  27             * Neither the name of the copyright holders nor the names of
  28               contributors may be used to endorse or promote products derived
  29               from this software without specific prior written permission.
  30          
  31             * Source code can be used for academic purpose. 
  32                   For commercial use permission form the author needs to be taken.
  33          
  34            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  35            AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  36            IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  37            ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  38            LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  39            CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  40            SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  41            INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  42            CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  43            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  44            POSSIBILITY OF SUCH DAMAGE. 
  45          
  46            Software released under Creative Commence cc by-nc-sa licence.
  47            For legal information refer to: 
  48            http://creativecommons.org/licenses/by-nc-sa/3.0/legalcode
  49          
  50          ********************************************************************************/
  51          
  52          #include <intrins.h>
  53          #include "p89v51rx2.h"
C51 COMPILER V9.01   MAIN                                                                  06/03/2015 19:36:34 PAGE 2   

  54          
  55          sbit buzzer=P2^7;  //buzzer = 1; buzzer off, buzzer = 0; buzzer on,
  56          
  57          //program specific declarations
  58          sbit RS = P2^6;    //P2^6 is connected to the RS line of LCD 
  59          sbit RW = P2^5;    //P2^5 is connected to the RW line of LCD
  60          sbit E = P2^4;     //P2^4 is connected to the EN line of LCD
  61          sbit BUSY = P2^3;  //P2^3 is connected to the DB3 pin of LCD
  62          
  63          unsigned char A=0; //used in the swap(unsigned char tempdata) function
  64          
  65          // function for giving a delay of ms milliseconds
  66          void delay_ms(unsigned int ms)
  67          {
  68   1      unsigned int i,j;
  69   1      
  70   1      for(i=0;i<ms;i++)
  71   1      for(j=0;j<53;j++);
  72   1      }
  73          
  74          // subroutines required to check if LCD has finished executing previous command and is ready to accept nex
             -t one
  75           void ready(void) 
  76           {
  77   1        bit readybit;
  78   1        unsigned char buzzer_status = 0;
  79   1        buzzer_status = P2 & 0x80; //storing original buzzer status
  80   1          
  81   1        E = 0;
  82   1        RS = 0;                        //  to select comand register
  83   1        RW = 1;                        // to select read mode
  84   1      
  85   1        while(readybit == 1)   // keep checking MSB bit till busy goes low
  86   1        {
  87   2         E = 1;                // high to low transition on E pin requird to clock in data
  88   2         P2 = 0x7F | buzzer_status;            // to set this pin in read mode to read busy signal from MSB (D7) of the L
             -CD
  89   2         readybit = P2^3;
  90   2         E = 0;
  91   2        }
  92   1       }
  93          
  94          /******************************************************************************************************
  95                  Function: swap(unsigned char tempdata)
  96                  
  97                  Description: This function swaps the data which is passed to it 
  98                                           in such away that higher nibble is pushed in place of
  99                                           lower nibble because lower nibble of microcontroller is being used for data transfer.
 100          *******************************************************************************************************/
 101          
 102          unsigned char swap(unsigned char tempdata)
 103          {
 104   1      A = tempdata;
 105   1      A = _cror_(A,4);        // this uses an inbuilt rotate function to get MSB's in LSB's
 106   1      tempdata = A & 0x0F;
 107   1      return tempdata;
 108   1      }       
 109          
 110          /****************************************************************
 111                  Function: commandsend(unsigned char command)
 112            
 113              Description: This function sends data to LCD as command by
C51 COMPILER V9.01   MAIN                                                                  06/03/2015 19:36:34 PAGE 3   

 114                                           selecting the instruction register
 115          ****************************************************************/
 116          
 117          void commandsend(unsigned char command)
 118          { 
 119   1      unsigned char temp;
 120   1      unsigned char buzzer_status = 0;
 121   1        
 122   1      buzzer_status = P2 & 0x80; //storing original buzzer status
 123   1      
 124   1      ready();       // checking for busy bit to send next nibble
 125   1      temp = swap(command);
 126   1      P2 = temp | buzzer_status; // to get higher nibble
 127   1      RW = 0;        // to select write mode
 128   1      RS = 0;        // to select command register
 129   1      E = 1;         // to get the enable high to low transition
 130   1      E = 0;         // in order to gate in the data
 131   1      
 132   1      P2 = (command & 0x0F) | buzzer_status; // to get the lower nibble
 133   1      RW = 0;
 134   1      RS = 0;        // repeat again all above steps    
 135   1      
 136   1      E = 1;
 137   1      E = 0;
 138   1      delay_ms(2);  //delay of 2 ms
 139   1      }
 140          
 141          /***********************************************************
 142                  Function: datasend(unsigned char command)
 143            
 144              Description: This function sends data to LCD as data by
 145                                           selecting the data register
 146          ***********************************************************/
 147          
 148          void datasend(unsigned char lcddata)
 149          {
 150   1      unsigned char temp;
 151   1      unsigned char buzzer_status = 0;
 152   1      
 153   1      buzzer_status = P2 & 0x80; //storing original buzzer status
 154   1      
 155   1      temp = swap(lcddata);
 156   1      ready();        // checking for busy bit to send next nibble
 157   1      P2 = temp | buzzer_status;  // to get higher nibble
 158   1      RW = 0;  // to select write mode
 159   1      RS = 1;  // to select data register
 160   1               
 161   1      E = 1;
 162   1      E = 0;
 163   1      
 164   1      
 165   1      P2 = (lcddata & 0x0F)  | buzzer_status;
 166   1      RW = 0;
 167   1      RS = 1;
 168   1      E = 1;
 169   1      E = 0;
 170   1      delay_ms(2);     //delay of 2 ms
 171   1      }
 172          
 173          /***********************************************************************
 174           Function: lcd_init(void) 
 175           Description: This function initialises LCD display in 4-bit mode.
C51 COMPILER V9.01   MAIN                                                                  06/03/2015 19:36:34 PAGE 4   

 176                        The intialisation functions are 8-bit wide, so we write
 177                                    each inst into two seperate nibbles.
 178                                    Following instructions are used for Lcd init.
 179                                    1.>  0x30 8-bit mode
 180                                    2.>  0x28 4-bit mode and 5x8 dot character font
 181                                    3.>  0x0E Turn ON lcd and cursor
 182                                    4.>  0x06 Autoincrement cursor position
 183                                    5.>  0x01 Clear Lcd display   
 184                                    6.>  0x80 for setting cursor position
 185          ************************************************************************/
 186          
 187          void lcd_init(void)
 188          {                                               
 189   1      unsigned char buzzer_status = 0;
 190   1      
 191   1      buzzer_status = P2 & 0x80; //storing original buzzer status
 192   1      
 193   1      
 194   1      RS = 0;  //  to select comand register
 195   1      RW = 0;  // to select write mode
 196   1      delay_ms(40);  // on power ON we must allow a delay of 40ms for VCC to settle
 197   1       
 198   1      E = 0;
 199   1      P2 = 0x03 | buzzer_status; // send instruction to set FUNCTION SET to 8 bit mode though we have only conne
             -cted 4 bit data bus because by default on power ON LCD is in 8 bit mode
 200   1      E =  1;
 201   1      E = 0;
 202   1      
 203   1      delay_ms(4);  // delay of 4ms
 204   1        
 205   1      P2 = 0x03 | buzzer_status;        // send the same instruction two times again. This way the LCD controller kno
             -ws that we are operating in 4 bit mode
 206   1      E =  1;
 207   1      E = 0;
 208   1      delay_ms(2);       // delay of  2ms
 209   1      P2 = 0x03  | buzzer_status;
 210   1      E =  1;
 211   1      E = 0;
 212   1      delay_ms(2); // delay of  2ms
 213   1      
 214   1      P2 = 0x02  | buzzer_status;              // send FUNCTION SET instruction for 4 bit mode
 215   1      E =  1;
 216   1      E = 0;
 217   1      ready();
 218   1      P2 = 0x02  | buzzer_status; // again we send FUNCTION SET higher bits to keep 4 bit mode operation but mai
             -n aim is to set the parameters in lower bits
 219   1      
 220   1      E =  1;
 221   1      E = 0;
 222   1      P2 = 0x08  | buzzer_status; // these are the lower bits of FUNCTION SET. They set LCD to 1 display line an
             -d set font size to 5 x 8 dots
 223   1      
 224   1      E =  1;
 225   1      E = 0;
 226   1      ready();
 227   1      P2 = 0x00  | buzzer_status; // higher bits of DISPLAY OFF instruction
 228   1      E =  1;
 229   1      E = 0;
 230   1      P2 = 0x08  | buzzer_status;  // lower bits of DISPLAY OFF instruction
 231   1      E =  1;
 232   1      E = 0;
 233   1      ready();
C51 COMPILER V9.01   MAIN                                                                  06/03/2015 19:36:34 PAGE 5   

 234   1      P2 = 0x00  | buzzer_status;  // higher bits of CLEAR instruction
 235   1      E =  1;
 236   1      E = 0;
 237   1      P2 = 0x01  | buzzer_status; // lower bits of CLEAR instruction
 238   1      E =  1;
 239   1      E = 0;
 240   1      ready();
 241   1      P2 = 0x00  | buzzer_status;// higher bits of ENTRY MODE instruction
 242   1      E =  1;
 243   1      E = 0;
 244   1      
 245   1      P2 = 0x06  | buzzer_status;// lower bits of ENTRY MODE instruction to set increment i.e display to right s
             -ide mode and no shift
 246   1      E =  1;
 247   1      E = 0;
 248   1      ready();
 249   1      
 250   1      commandsend(0x0F); // set LCD ON; CURSOR OFF; BLINK ON.
 251   1      }
 252          
 253          void lcd_display(void)
 254          {
 255   1      int i=0;
 256   1      unsigned char lcd_data1[16]={"  NEX Robotics  "};  // While defining the character array make sure that it
             - is less than 16 characters(for each line of LCD) & long enough to hold all characters in the string 
 257   1      unsigned char lcd_data2[16]={"ERTSLab CSE IITB"};
 258   1      
 259   1      commandsend(0x01); // clear display.
 260   1      commandsend(0x06);  // auto increment cursor position
 261   1      
 262   1      for(i=0;i<16;i++)
 263   1      {
 264   2       datasend(lcd_data1[i]);
 265   2      }
 266   1      
 267   1      commandsend(0xC0);         //80h+40h. 80h for setting cursor position
 268   1                                                    //40h is the address for the first character on thesecon line
 269   1      
 270   1      for(i=0;i<16;i++)
 271   1      {
 272   2       datasend(lcd_data2[i]);
 273   2      }
 274   1      }
 275          
 276          
 277          void main (void)
 278          {
 279   1      lcd_init();
 280   1      buzzer = 1; //buzzer off
 281   1      
 282   1      while(1)
 283   1      {
 284   2       lcd_display();
 285   2       delay_ms(1000);
 286   2      }
 287   1      
 288   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    416    ----
   CONSTANT SIZE    =     32    ----
C51 COMPILER V9.01   MAIN                                                                  06/03/2015 19:36:34 PAGE 6   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
