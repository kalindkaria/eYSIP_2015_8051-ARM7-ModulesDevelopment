C51 COMPILER V9.01   SERIAL_COMMUNICATION                                                  06/09/2015 20:03:12 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE SERIAL_COMMUNICATION
OBJECT MODULE PLACED IN serial_communication.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE serial_communication.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <intrins.h>
   2          #include "p89v51rx2.H"
   3          #include"lcd_display.h"
   4          unsigned char rx_data;
   5          sbit left_velocity=P1^3;
   6          sbit right_velocity=P1^4;
   7          sbit LB=P1^0;
   8          sbit LF=P1^1;
   9          sbit RF=P1^2;
  10          sbit RB=P3^4;
  11           
  12          //sbit buzzer=P2^7;
  13          /**************************************************************************
  14                  Function: uart_setup()
  15                  
  16                  Description: This function configures Timer1 for generating the Baudrate.
  17                                       The TH1 register should be written with following hex numbers
  18                                   for desired baud rate. After setting the baudrate, SCON register
  19                                       for enabling Rx and setting up the frame format.
  20                  
  21                                   9600 ----->  0xFD
  22                                       4800 ----->  0xFA
  23                                       2400 ----->  0xF4
  24                                       1200 ----->  0xE8
  25          
  26          **************************************************************************/
  27          void uart_setup()
  28          {
  29   1          TMOD = 0x20;                // configure timer1 for Mode 2 operation for the correct baud rate 
  30   1          TH1 = 0xFD;         // 9600 bps for 11.0592 MHz clock 
  31   1          TCON = 0x40;        // Start timer 1 by setting TR1 = 1 
  32   1          SCON = 0x50;                // Set Serial IO to receive and normal mode 
  33   1              RI=0;               //Receive Interrupt Flag is cleared
  34   1              TI=0;                           //Tx interrupt flag is cleared
  35   1      }                                
  36          
  37          /***************************************************************************
  38                  Function: void char RxData()
  39                  
  40                  Description: This function copies any data that is present in the SBUF 
  41                                       register and returns it to the calling function.
  42          ***************************************************************************/
  43          
  44           unsigned char RxData()
  45          {
  46   1          unsigned char rcv_data;
  47   1              rcv_data = (unsigned char)SBUF;  //if any data is available copy it from SBUF
  48   1              return rcv_data;      //return the received data
  49   1      }
  50           /* Function name - forward
  51          * Input - none 
  52          * Outut - moves the robot in forward direction
  53          * Logic - set appropriate bits high to move forward as per the logic table
  54          */
  55          void forward(void) //go forward
C51 COMPILER V9.01   SERIAL_COMMUNICATION                                                  06/09/2015 20:03:12 PAGE 2   

  56          {
  57   1      RF=1;
  58   1      LF=1;
  59   1      RB=0;
  60   1      LB=0;
  61   1      }
  62          /* Function name - backward
  63          * Input - none 
  64          * Outut - moves the robot in backward direction
  65          * Logic - set appropriate bits high to move backward as per the logic table
  66          */
  67          void backward(void) //go backward
  68          {
  69   1      RF=0;
  70   1      LF=0;
  71   1      RB=1;
  72   1      LB=1;
  73   1      }
  74          /* Function name - left
  75          * Input - none 
  76          * Outut - turns the robot in left direction
  77          * Logic - set appropriate bits high to turn left as per the logic table
  78          */
  79          void left(void) //go left ( hard left)
  80          {
  81   1      RF=1;
  82   1      LF=0;
  83   1      RB=0;
  84   1      LB=1;
  85   1      }
  86          /* Function name - right
  87          * Input - none 
  88          * Outut - turns the robot in right direction
  89          * Logic - set appropriate bits high to turn right as per the logic table
  90          */
  91          void right(void) //go right ( hard right)
  92          {
  93   1      RF=0;
  94   1      LF=1;
  95   1      RB=1;
  96   1      LB=0;
  97   1      }
  98          /* Function name - stop
  99          * Input - none 
 100          * Outut - stops the robot
 101          * Logic - set appropriate bits high to stop all motors as per the logic table
 102          */
 103          void stop(void) //stop ( soft stop )
 104          {
 105   1      RF= 0;
 106   1      LF= 0;
 107   1      RB= 0;
 108   1      LB= 0;
 109   1      }
 110          void process()
 111          {
 112   1      if (rx_data== 0x38)
 113   1      buzzer=0; 
 114   1      if (rx_data == 0x39)
 115   1      buzzer = 1;
 116   1      if(rx_data==0x30)
 117   1      forward();
C51 COMPILER V9.01   SERIAL_COMMUNICATION                                                  06/09/2015 20:03:12 PAGE 3   

 118   1      if(rx_data==0x31)
 119   1      backward();
 120   1      if(rx_data==0x32)
 121   1      right();
 122   1      if(rx_data==0x33)
 123   1      left();
 124   1      if(rx_data==0x34)
 125   1      stop();                 
 126   1      }
 127          void main(void)
 128          {
 129   1              
 130   1              buzzer=1;
 131   1              uart_setup(); // calling the UART setup function
 132   1              lcd_init();
 133   1              lcd_clear();
 134   1              while(1) //loop continuously
 135   1              {
 136   2                      if (RI==1)   // if any data is present store it and transmit it to LCD 
 137   2                      {
 138   3                      rx_data = RxData();  //get the received data
 139   3                      datasend(rx_data);
 140   3                      process();
 141   3                      RI = 0;  //Clear receive interrupt. Must be cleared by the user.
 142   3                      TI = 0; //Clear transmit interrupt. Must be cleared by the user.
 143   3                      }
 144   2              }
 145   1      }
 146          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    839    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
