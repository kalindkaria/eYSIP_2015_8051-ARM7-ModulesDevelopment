C51 COMPILER V9.01   SQUARE_TRACING                                                        07/02/2015 14:48:35 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE SQUARE_TRACING
OBJECT MODULE PLACED IN square_tracing.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE square_tracing.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          * Author: Bhumika Varshney, ERTS Lab, IIT Bombay
   3          * File name: square_tracing.c
   4          * Functions: int1_setup(), forward(), stop(), right(), move_forward(unsigned distance), right_turn_90() 
   5          * Global variable: left_velocity, right_velocity, LF, LB, RF, RB, left_shaft_count, reqd_shaft_count_int, 
             -distance
   6          * This experiment demonstrates simple square tracing experiment using position encoders and working of ext
             -ernal interrupts.
   7          * Concepts covered: Position Encoders and interrupts
   8            
   9           Note: 
  10           1. Make sure that in the configuration options following settings are 
  11           done for proper operation of the code
  12            Microcontroller: P89V51RD2
  13           Frequency: 11.0592 MHz
  14           2. Make sure that the required jumper is connected to connect left position encoder with the external int
             -errupt                                                                   
  15           3. Coding Standards followed(For further reference on Coding Standards go to portal link).
  16          ********************************************************************************************/
  17          #include <intrins.h>
  18          #include "p89v51rx2.H"
  19          #include"lcd_display.h"
  20          
  21          //program specific declarations
  22          sbit LB=P1^0;       //LEFT BACK Pin.
  23          sbit LF=P1^1;           //LEFT FRONT Pin.
  24          sbit RF=P1^2;           //RIGHT FRONT Pin.
  25          sbit RB=P3^4;           //RIGHT BACK Pin.
  26          
  27          sbit left_velocity=P1^3;  //Left velocity control pin. 
  28          sbit right_velocity=P1^4; //Right velocity control pin. 
  29          
  30          unsigned int left_shaft_count=0;//initialize a variable to store the count pulses of the left position enc
             -oder.
  31          unsigned int reqd_shaft_count_int=0; //initialize a variable to store required number of count pulses to m
             -ove for desired distance
  32          unsigned int distance=0;  //initialize a variable to store desired distance
  33          
  34          /****************************************************************************
  35          * Function: int1_setup
  36          * Input: none
  37          * Output: none
  38          * Logic: initialization routine for Interrupt 1 setup, initalisation of the
  39          *        Int 1 should be done in the same sequence as given in this function.
  40          *******************************************************************************/
  41          void int1_setup() 
  42          {
  43   1      TCON = 0x04; //Set Interrupt 1 trigger type to falling edge trigger.
  44   1      IEN0 = 0x84; //External Interrupt 1 Enable and Global Interrupt Enable. 
  45   1      
  46   1      P3=0x08; //set P3.3 (INT 1) as input port.
  47   1                         // Can also be written as INT1 = 0; (refer to p89v51rx2.H).
  48   1      }
  49          
  50           /************************************************************************
C51 COMPILER V9.01   SQUARE_TRACING                                                        07/02/2015 14:48:35 PAGE 2   

  51          * Function: Interrupt Service Routine
  52          * Input: none
  53          * Output: none
  54          * Logic: This is an Interrupt Service Routine for external interrut1, 
  55          *        whenever interrupt1 occurs it executes this routine and 
  56          *        after this it returns to the main function
  57          ***************************************************************************/
  58          void int1_isr(void)interrupt 2     //ISR Routine for External Interrupt 1.
  59                                                                             //Refer to chapter 4 in the software manual (table 4.1)for syntax explanation.
  60          {
  61   1       left_shaft_count++;//when the slotted disc passes through the encoder pulses will be generated,each pulse
             - will generate an interrupt and the right shaft count value will be incremented.
  62   1       IE1 = 0; // When interrupt is processed it is cleared automatically by the hardware  or it can also be cl
             -eared by the software.
  63   1                        // Clearing IE1 flag to 0.    
  64   1      }
  65          /* Function name - forward
  66          * Input - none 
  67          * Outut - moves the robot in forward direction
  68          * Logic - set appropriate bits high to move forward as per the logic table
  69          */
  70          void forward(void)
  71          {
  72   1              RF=1;
  73   1              LF=1;
  74   1              RB=0;
  75   1              LB=0;
  76   1      }
  77          /* Function name - right
  78          * Input - none 
  79          * Outut - turns the robot right
  80          * Logic - set appropriate bits high to turn right as per the logic table
  81          */ 
  82          void right(void)
  83          {
  84   1              RF=0;
  85   1              LF=1;
  86   1              RB=1;
  87   1              LB=0;
  88   1      }
  89          /* Function name - stop
  90          * Input - none 
  91          * Outut - stops the robot
  92          * Logic - set appropriate bits high to stop all motors as per the logic table
  93          */  
  94          void stop(void)
  95          {
  96   1              RF=0;
  97   1              LF=0;
  98   1              RB=0;
  99   1              LB=0;
 100   1      }
 101          /***************************************************************************************
 102          * Function - move_forward
 103          * Input - desired distance to be moved
 104          * Output - motion of robot
 105          * Logic - counts the required shaft count and checks for the left shaft count if it has 
 106          *         moved the desired ditance or not
 107          ****************************************************************************************/
 108          void move_forward(unsigned int distance)
 109          {
 110   1              left_shaft_count=0;
C51 COMPILER V9.01   SQUARE_TRACING                                                        07/02/2015 14:48:35 PAGE 3   

 111   1              reqd_shaft_count_int=(unsigned int)(distance/5.338);  //This equation will calculate the count required f
             -or distance to be travelled. 
 112   1              int1_setup();//external linterrupt 1 initialization.
 113   1                                                      
 114   1              left_velocity = 1;       //setting motor enable pins to 1
 115   1              right_velocity = 1; //setting motor enable pins to 1
 116   1              
 117   1              forward();        //go forward
 118   1              while(left_shaft_count<reqd_shaft_count_int)
 119   1              {
 120   2                              lcd_print(1,1,reqd_shaft_count_int,2);
 121   2                              lcd_print(1,5,left_shaft_count,2);
 122   2              }; //wait till desired distance is covered.                          
 123   1      
 124   1              stop();  //stop motor
 125   1      delay_ms(500);                  
 126   1              
 127   1      }
 128          
 129          /***************************************************************************************
 130          * Function - right_turn_90
 131          * Input - none
 132          * Output - turns the robot 90 degree right
 133          * Logic - counts the required shaft count and checks for the left shaft count if it has 
 134          *         moved the desired angle or not
 135          ****************************************************************************************/
 136          void right_turn_90()
 137          {
 138   1              left_shaft_count=0;
 139   1              reqd_shaft_count_int=(unsigned int)(90/4.090); //This equation will calculate the count required for dist
             -ance to be travelled.
 140   1                                              
 141   1              left_velocity = 1;       //setting motor enable pins to 1
 142   1              right_velocity = 1; //setting motor enable pins to 1
 143   1              
 144   1              right();          //go forward                            
 145   1              while(left_shaft_count<reqd_shaft_count_int)
 146   1              {
 147   2                      lcd_print(1,1,reqd_shaft_count_int,2);
 148   2                      lcd_print(1,5,left_shaft_count,2);
 149   2              }; //wait till desired distance is covered.
 150   1       
 151   1              stop();
 152   1      delay_ms(500);
 153   1      }
 154          /*
 155          * Function Name: main
 156          * Input: None
 157          * Output: int to inform the caller that the program exited correctly or incorrectly (C code standard)
 158          * Logic: initializes and enable the interrupts and calls functions to move the robot for a desired
 159          *        distance and turn for a desired angle accordingly 
 160          * Example Call: Called automatically by the Operating System
 161          *
 162          */
 163          void main()
 164          {                               
 165   1              unsigned char i=0;      //variable to count for 4 sides of a square                                               
 166   1              lcd_init();
 167   1              lcd_clear();
 168   1              distance=500;  //Enter here the distance to be travelled in mm.
 169   1              delay_ms(500); 
 170   1              
C51 COMPILER V9.01   SQUARE_TRACING                                                        07/02/2015 14:48:35 PAGE 4   

 171   1              for(i=0;i<4;i++)
 172   1              {    
 173   2              move_forward(500);      
 174   2              right_turn_90();
 175   2              }
 176   1              while(1);  
 177   1      }//main ends                
 178          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    943    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
