C51 COMPILER V9.01   VELOCITY_CONTROL                                                      06/12/2015 17:18:37 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE VELOCITY_CONTROL
OBJECT MODULE PLACED IN velocity_control.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE velocity_control.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          * Author: Bhumika Varshney, ERTS Lab, IIT Bombay
   3          * File name: velocity_control.c
   4          * Functions: left_motor_vel(unsigned int), right_motor_vel(unsigned int), pca_init(), forward()
   5          * Global variable: LF, LB, RF, RB
   6          * This experiment demonstrates simple velocity control operation using PWM.
   7          * Concepts covered: PWM Technique 
   8            
   9           Note: 
  10           1. Make sure that in the configuration options following settings are 
  11           done for proper operation of the code
  12            Microcontroller: P89V51RD2
  13           Frequency: 11.0592 MHz                                                            
  14          2.  Coding Standards followed(For further reference on Coding Standards go to portal link).
  15          *********************************************************************************/
  16          #include<intrins.h>
  17          #include "p89v51rx2.h"
  18          sbit LB=P1^0; // Left Back
  19          sbit LF=P1^1; // Left Forward
  20          sbit RF=P1^2; // Right Forward
  21          sbit RB=P3^4; // Right Back
  22          /**************************************************************************************************
  23          Function name - left_motor_vel
  24          * Input - compare velocity in hexadecimal
  25          * Output - none
  26          * Logic - changes contents of the capture register in order to change velocity
  27          *          ,set left motor with velocity vel(compare value)
  28          * Note - 0x00 will give full (100% duty cycle) velocity, while 0xFF will give zero (0% duty cycle)
  29          *        velocity. Any value in between 0x00 and 0xFF will give intermediate velocity.
  30          ****************************************************************************************************/
  31          void left_motor_vel(unsigned int vel)
  32          {
  33   1              CCAP0H=vel;
  34   1      }
  35          /**************************************************************************************************
  36          *Function name - right_motor_vel
  37          * Input - compare velocity in hexadecimal
  38          * Output - none
  39          * Logic - changes contents of the capture register in order to change velocity
  40          *          ,set right motor with velocity vel(compare value)
  41          * Note - 0x00 will give full (100% duty cycle) velocity, while 0xFF will give zero (0% duty cycle)
  42          *        velocity. Any value in between 0x00 and 0xFF will give intermediate velocity.
  43          ****************************************************************************************************/
  44          void right_motor_vel(unsigned int vel)
  45          {
  46   1              CCAP1H=vel;
  47   1      }
  48          /*************************************************************************************
  49          * Function name - pca_init
  50          * Input - none
  51          * Output - none
  52          * Logic - initialise programmable counter array module to generate pwm. 
  53          *         The CCAPnH register holds the reload value. CCAPnL register increments,
  54          *         and is loaded with this value everytime it overflows,thus the value in
  55          *         CCAPnH can be changed to change the motor velocity
C51 COMPILER V9.01   VELOCITY_CONTROL                                                      06/12/2015 17:18:37 PAGE 2   

  56          ***************************************************************************************/
  57          void pca_init(void)
  58          {
  59   1      //80 sets PCA counter to run at Fosc/6
  60   1      CMOD=0x80;
  61   1      //start PCA counter
  62   1      CCON=0x40;
  63   1      //Left motor duty cycle
  64   1      CCAP0L=0x00;
  65   1      CCAP0H=0xFF;
  66   1      //Right motor duty cycle
  67   1      CCAP1L=0x00;
  68   1      CCAP1H=0xFF;
  69   1      //enable PWM and ECOM bits for left motor
  70   1      CCAPM0=0x42;
  71   1      //enable PWM and ECOM bits for right motor
  72   1      CCAPM1=0x42;
  73   1      }
  74          /* Function name - forward
  75          * Input - none 
  76          * Outut - moves the robot in forward direction
  77          * Logic - set appropriate bits high to move forward as per the logic table
  78          */
  79          void forward()
  80          {
  81   1              LF=1;
  82   1              RF=1;
  83   1              LB=0;
  84   1              RB=0;
  85   1      }
  86          /*
  87          * Function Name: main
  88          * Input: None
  89          * Output: int to inform the caller that the program exited correctly or
  90          * incorrectly (C code standard)
  91          * Logic: generates pwm signal by calling above defined functions and setting the desired velocity
  92          * Example Call: Called automatically by the Operating System
  93          *
  94          */
  95          void main()
  96          {
  97   1              pca_init();
  98   1      /*set the motor velocities over here. Use only values
  99   1      in the range 0x00 – 0xFF */
 100   1              left_motor_vel(0x1F);
 101   1              right_motor_vel(0x1F);
 102   1              forward();
 103   1              while(1);
 104   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     57    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
