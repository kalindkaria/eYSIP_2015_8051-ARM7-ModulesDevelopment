C51 COMPILER V9.01   BLACK_LINE_FOLLOWER                                                   06/11/2015 19:20:25 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE BLACK_LINE_FOLLOWER
OBJECT MODULE PLACED IN black_line_follower.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE black_line_follower.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          * Author: Bhumika Varshney, ERTS Lab, IIT Bombay
   3          * File name: white_line_follower.c
   4          * Functions: ADC_conversion(unsigned char ADC_channel_number), left_motor_velocity(unsigned char vel),
   5          *            right_motor_velocity(unsigned char vel), forward(), right(), left(), stop(), pca_init()
   6          * Global variable: start_conv, output_enable, unsigned char i, left_velocity, right_velocity, LF, LB, RF, 
             -RB
   7          *                  unsigned char flag
   8          * This experiment demonstrates  white line following by monitoring the white line sensor's values.
   9          * Concepts covered: ADC and sensors interfacing 
  10            
  11           Note: 
  12           1. Make sure that in the configuration options following settings are 
  13           done for proper operation of the code
  14            Microcontroller: P89V51RD2
  15           Frequency: 11.0592 MHz
  16           2. This code displays ADC converted sensor readings. To calculate voltage from the ADC’s digital value we
             - can use
  17           following formula:
  18               V Battery = 0.7V + (ADC value * 0.06149)                                                              
  19          3.  Coding Standards followed(For further reference on Coding Standards go to portal link).
  20          **********************************************************************************************************
             -*********/
  21          #include <intrins.h>
  22          #include "p89v51rx2.H"
  23          #include "lcd_display.h"
  24          
  25          //The appropriate bits have been defined as per the logic table for motion control
  26          sbit left_velocity=P1^3;
  27          sbit right_velocity=P1^4;
  28          sbit LB=P1^0;
  29          sbit LF=P1^1;
  30          sbit RF=P1^2;
  31          sbit RB=P3^4;
  32          
  33          sbit start_conv = P3^6;          //P3^6 is connected to Start and ALE pin of ADC0808
  34          sbit output_enable = P3^7;               //P3^7 is connected to Output Enable Pin of ADC0808
  35          
  36          unsigned char i=0;  //used in main function during ADC conversion
  37          unsigned char flag=0;  //used in white line following logic
  38           
  39          
  40          /********************************************************************************
  41                  Function: ADC_conversion
  42                  Input: ADC_channel_number
  43                  Output: Digital equivalent of analog data
  44                  Description: This function performs ADC conversion of a channel number 
  45                                           that is passed to it. The return value of this function contains 
  46                                           digital data of the selected channel.
  47                             
  48                                           Analog Sensor Pin Mapping
  49            
  50                           IN0-----> IR Proximity sensor 3 (front)
  51                                           IN1-----> Batt. Voltage
  52                                           IN2-----> Front Sharp IR Range sensor
C51 COMPILER V9.01   BLACK_LINE_FOLLOWER                                                   06/11/2015 19:20:25 PAGE 2   

  53                                           IN3-----> IR Proximity sensor 2 (left side)
  54                                           IN4-----> Left Whiteline
  55                                           IN5-----> Center Whiteline
  56                                           IN6-----> Right Whiteline
  57                                           IN7-----> IR Proximity sensor 4 (right side)
  58          ********************************************************************************/
  59          unsigned char ADC_conversion(unsigned char ADC_ch_no)
  60          {
  61   1      unsigned char ADC_data;
  62   1      
  63   1      P0 = ADC_ch_no;           // to select channel no. send address on P0
  64   1      
  65   1      start_conv = 1; // ADC0808 will latch the address on L-H transition on the ALE pin
  66   1      start_conv = 0; // ADC0808 will start conversion on H-L transition on the start pin
  67   1      delay_ms(2);    // conversion time for ADC0808
  68   1      
  69   1      P0 =0xFF;               // output enable and read
  70   1      output_enable = 1;      //Enabling o/p of ADC0808 for to read the converted data
  71   1      ADC_data = P0;          //storing adc_data
  72   1      output_enable = 0;      //disabling ADC 0808 o/p
  73   1      return ADC_data;        //returning adc_data
  74   1      }
  75          
  76          /**************************************************************************************************
  77          Function name - left_motor_vel
  78          * Input - compare velocity in hexadecimal
  79          * Output - none
  80          * Logic - changes contents of the capture register in order to change velocity
  81          *          ,set left motor with velocity vel(compare value)
  82          * Note - 0x00 will give full (100% duty cycle) velocity, while 0xFF will give zero (0% duty cycle)
  83          *        velocity. Any value in between 0x00 and 0xFF will give intermediate velocity.
  84          ****************************************************************************************************/
  85          void left_motor_velocity(unsigned char vel)
  86          {
  87   1      CCAP0H=vel;
  88   1      }
  89          
  90          /**************************************************************************************************
  91          Function name - right_motor_vel
  92          * Input - compare velocity in hexadecimal
  93          * Output - none
  94          * Logic - changes contents of the capture register in order to change velocity
  95          *          ,set right motor with velocity vel(compare value)
  96          * Note - 0x00 will give full (100% duty cycle) velocity, while 0xFF will give zero (0% duty cycle)
  97          *        velocity. Any value in between 0x00 and 0xFF will give intermediate velocity.
  98          ****************************************************************************************************/
  99          void right_motor_velocity(unsigned char vel)
 100          {
 101   1      CCAP1H=vel;
 102   1      }
 103          
 104          /* Function name - forward
 105          * Input - none 
 106          * Output - moves the robot in forward direction
 107          * Logic - set appropriate bits high to move backward as per the logic table
 108          */
 109          void forward(void) //go forward
 110          {
 111   1      RF=1;
 112   1      LF=1;
 113   1      RB=0;
 114   1      LB=0;
C51 COMPILER V9.01   BLACK_LINE_FOLLOWER                                                   06/11/2015 19:20:25 PAGE 3   

 115   1      }
 116          /* Function name - left
 117          * Input - none 
 118          * Outut - turns the robot in left direction
 119          * Logic - set appropriate bits high to turn left as per the logic table
 120          */
 121          void left(void) //go left ( hard left)
 122          {
 123   1      RF=1;
 124   1      LF=1;
 125   1      RB=0;
 126   1      LB=0;
 127   1       left_motor_velocity(0x5F);     //decrease  left motor velocity
 128   1       right_motor_velocity(0x2F);    //increase right motor velocity
 129   1      
 130   1      }
 131          /* Function name - right
 132          * Input - none 
 133          * Outut - turns the robot in right direction
 134          * Logic - set appropriate bits high to turn right as per the logic table
 135          */
 136          void right(void) //go right ( hard right)
 137          {
 138   1      RF=1;
 139   1      LF=1;
 140   1      RB=0;
 141   1      LB=0;
 142   1       left_motor_velocity(0x3F);     //increase left motor velocity 
 143   1       right_motor_velocity(0x5F);  //decrease  right motor velocity
 144   1      }
 145          /* Function name - stop
 146          * Input - none 
 147          * Outut - stops the robot
 148          * Logic - set appropriate bits high to stop all motors as per the logic table
 149          */
 150          void stop(void) //stop ( soft stop )
 151          {
 152   1      RF= 0;
 153   1      LF= 0;
 154   1      RB= 0;
 155   1      LB= 0;
 156   1      }
 157          
 158          /*************************************************************************************
 159          * Function name - pca_init
 160          * Input - none
 161          * Output - none
 162          * Logic - initialise programmable counter array module to generate pwm. 
 163          *         The CCAPnH register holds the reload value. CCAPnL register increments,
 164          *         and is loaded with this value everytime it overflows,thus the value in
 165          *         CCAPnH can be changed to change the motor velocity
 166          ***************************************************************************************/
 167          void pca_init(void)
 168          {
 169   1       CMOD=0x80;        //80 sets PCA counter to run at Fosc/6; 
 170   1       CCON=0x40;        //start PCA counter
 171   1                                                      
 172   1       CCAP0L=0x00;   
 173   1       CCAP0H=0xFF;  //Left motor duty cycle register
 174   1        
 175   1       CCAP1L=0x00;                             
 176   1       CCAP1H=0xFF;  //Right motor duty cycle register
C51 COMPILER V9.01   BLACK_LINE_FOLLOWER                                                   06/11/2015 19:20:25 PAGE 4   

 177   1      
 178   1       CCAPM0=0x42;  //enable PWM mode and ECOM bits for left motor
 179   1       CCAPM1=0x42;  //enable PWM mode and ECOM bits for right motor
 180   1      }
 181          
 182          /*
 183          * Function Name: main
 184          * Input: None
 185          * Output: int to inform the caller that the program exited correctly or
 186          * incorrectly (C code standard)
 187          * Logic: constantly monitors the white line sensors value and accordingly adjusts its path.
 188          * Example Call: Called automatically by the Operating System
 189          *
 190          */
 191          void main()
 192          {
 193   1              unsigned int left_sensor_value=0;
 194   1              unsigned int middle_sensor_value=0;
 195   1              unsigned int right_sensor_value=0;
 196   1              
 197   1              unsigned char i=0;
 198   1              output_enable = 0;
 199   1              start_conv = 0;    //de-assert all control signals to ADC
 200   1       
 201   1              lcd_init(); //Initialize LCD
 202   1              pca_init();
 203   1              lcd_clear();
 204   1              
 205   1              forward(); //moves forward
 206   1              left_motor_velocity(0x4F);                      
 207   1              right_motor_velocity(0x4F);  
 208   1       while(1)
 209   1       {
 210   2              left_sensor_value=ADC_conversion(4); 
 211   2              middle_sensor_value=ADC_conversion(5);
 212   2              right_sensor_value=ADC_conversion(6);
 213   2              
 214   2              lcd_print(1,1,left_sensor_value,3);
 215   2              lcd_print(1,6,middle_sensor_value,3);
 216   2              lcd_print(1,11,right_sensor_value,3);
 217   2              lcd_print(2,1,flag,1);
 218   2              flag=0;          //reset the flag to 0
 219   2      
 220   2              if(left_sensor_value<20 && middle_sensor_value>50 && right_sensor_value<20 && flag==0) //checks if middle
             - sensor is on white line and rest two on black
 221   2              {
 222   3                      flag=1; //set the flag to 1 so that further white line sensor comparision is disabled
 223   3                      forward();  //left and right motor is at same velocity
 224   3              }
 225   2              if(left_sensor_value>20 && right_sensor_value<20 && flag==0) //if it deviates towards right
 226   2              {
 227   3                      flag=1; //set the flag to 1 so that further white line sensor comparision is disabled
 228   3                      left(); //soft left turn by varying velocity
 229   3                      while(left_sensor_value<20);
 230   3              }
 231   2              if(left_sensor_value<20 && right_sensor_value>20 && flag==0) //if it deviates towards left
 232   2              {
 233   3                      flag=1; //set the flag to 1 so that further white line sensor comparision is disabled
 234   3                      right(); //soft right turn by varying velocity
 235   3                      while(right_sensor_value<20);
 236   3              }
 237   2              if(left_sensor_value<20 && middle_sensor_value<20 && right_sensor_value<20 && flag==0) //if all sensors a
C51 COMPILER V9.01   BLACK_LINE_FOLLOWER                                                   06/11/2015 19:20:25 PAGE 5   

             -re on black
 238   2                      stop();  //stops
 239   2              }
 240   1      }//main ends here


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1116    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
