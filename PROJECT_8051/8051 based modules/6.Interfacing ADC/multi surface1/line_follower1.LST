C51 COMPILER V9.01   LINE_FOLLOWER1                                                        06/12/2015 16:56:31 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LINE_FOLLOWER1
OBJECT MODULE PLACED IN line_follower1.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE line_follower1.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          * Author: Bhumika Varshney, ERTS Lab, IIT Bombay
   3          * File name: line_follower1.c
   4          * Functions: ADC_conversion(unsigned char ADC_channel_number), left_motor_velocity(unsigned char vel),
   5          *            right_motor_velocity(unsigned char vel), forward(), right(), left(), stop(), pca_init()
   6          * Global variable: start_conv, output_enable, unsigned char i, left_velocity, right_velocity, LF, LB, RF, 
             -RB
   7          *                  unsigned char flag
   8          * This experiment demonstrates multisurface line following on both white as well as black by monitoring th
             -e white line sensor's values.
   9          * Concepts covered: ADC and sensors interfacing 
  10            
  11           Note: 
  12           1. Make sure that in the configuration options following settings are 
  13           done for proper operation of the code
  14            Microcontroller: P89V51RD2
  15           Frequency: 11.0592 MHz
  16           2. This code displays ADC converted sensor readings. To calculate voltage from the ADC’s digital value we
             - can use
  17           following formula:
  18               V Battery = 0.7V + (ADC value * 0.06149)                                                              
  19          3.  Coding Standards followed(For further reference on Coding Standards go to portal link).
  20          **********************************************************************************************************
             -*********/
  21          #include <intrins.h>
  22          #include "p89v51rx2.H"
  23          #include "lcd_display.h"
  24          
  25          //The appropriate bits have been defined as per the logic table for motion control
  26          sbit left_velocity=P1^3;
  27          sbit right_velocity=P1^4;
  28          sbit LB=P1^0;
  29          sbit LF=P1^1;
  30          sbit RF=P1^2;
  31          sbit RB=P3^4;
  32          
  33          sbit start_conv = P3^6;          //P3^6 is connected to Start and ALE pin of ADC0808
  34          sbit output_enable = P3^7;       //P3^7 is connected to Output Enable Pin of ADC0808
  35          
  36          unsigned char i=0;      //used in main function during ADC conversion
  37          unsigned char flag=0;  //used in white line following logic
  38           
  39          
  40          /********************************************************************************
  41                  Function: ADC_conversion
  42                  Input: ADC_channel_number
  43                  Output: Digital equivalent of analog data
  44                  Description: This function performs ADC conversion of a channel number 
  45                                           that is passed to it. The return value of this function contains 
  46                                           digital data of the selected channel.
  47                             
  48                                           Analog Sensor Pin Mapping
  49            
  50                           IN0-----> IR Proximity sensor 3 (front)
  51                                           IN1-----> Batt. Voltage
C51 COMPILER V9.01   LINE_FOLLOWER1                                                        06/12/2015 16:56:31 PAGE 2   

  52                                           IN2-----> Front Sharp IR Range sensor
  53                                           IN3-----> IR Proximity sensor 2 (left side)
  54                                           IN4-----> Left Whiteline
  55                                           IN5-----> Center Whiteline
  56                                           IN6-----> Right Whiteline
  57                                           IN7-----> IR Proximity sensor 4 (right side)
  58          ********************************************************************************/
  59          unsigned char ADC_conversion(unsigned char ADC_ch_no)
  60          {
  61   1              unsigned char ADC_data;
  62   1      
  63   1              P0 = ADC_ch_no;         // to select channel no. send address on P0
  64   1      
  65   1              start_conv = 1;         // ADC0808 will latch the address on L-H transition on the ALE pin
  66   1              start_conv = 0;         // ADC0808 will start conversion on H-L transition on the start pin
  67   1              delay_ms(2);            // conversion time for ADC0808
  68   1      
  69   1              P0 =0xFF;               // output enable and read
  70   1              output_enable = 1;      //Enabling o/p of ADC0808 for to read the converted data
  71   1              ADC_data = P0;          //storing adc_data
  72   1              output_enable = 0;      //disabling ADC 0808 o/p
  73   1              return ADC_data;        //returning adc_data
  74   1      }
  75          
  76          /**************************************************************************************************
  77          Function name - left_motor_vel
  78          * Input - compare velocity in hexadecimal
  79          * Output - none
  80          * Logic - changes contents of the capture register in order to change velocity
  81          *          ,set left motor with velocity vel(compare value)
  82          * Note - 0x00 will give full (100% duty cycle) velocity, while 0xFF will give zero (0% duty cycle)
  83          *        velocity. Any value in between 0x00 and 0xFF will give intermediate velocity.
  84          ****************************************************************************************************/
  85          void left_motor_velocity(unsigned char vel)
  86          {
  87   1              CCAP0H=vel;
  88   1      }
  89          
  90          /**************************************************************************************************
  91          Function name - right_motor_vel
  92          * Input - compare velocity in hexadecimal
  93          * Output - none
  94          * Logic - changes contents of the capture register in order to change velocity
  95          *          ,set right motor with velocity vel(compare value)
  96          * Note - 0x00 will give full (100% duty cycle) velocity, while 0xFF will give zero (0% duty cycle)
  97          *        velocity. Any value in between 0x00 and 0xFF will give intermediate velocity.
  98          ****************************************************************************************************/
  99          void right_motor_velocity(unsigned char vel)
 100          {
 101   1              CCAP1H=vel;
 102   1      }
 103          
 104          /* Function name - forward
 105          * Input - none 
 106          * Output - moves the robot in forward direction
 107          * Logic - set appropriate bits high to move backward as per the logic table
 108          */
 109          void forward(void) //go forward
 110          {
 111   1              RF=1;
 112   1              LF=1;
 113   1              RB=0;
C51 COMPILER V9.01   LINE_FOLLOWER1                                                        06/12/2015 16:56:31 PAGE 3   

 114   1              LB=0;
 115   1              left_motor_velocity(0x4F);
 116   1              right_motor_velocity(0x4F);
 117   1      }
 118          /* Function name - left
 119          * Input - none 
 120          * Outut - turns the robot in left direction
 121          * Logic - set appropriate bits high to turn left as per the logic table
 122          */
 123          void left(void) //go left ( hard left)
 124          {
 125   1              RF=1;
 126   1              LF=1;
 127   1              RB=0;
 128   1              LB=0;
 129   1              left_motor_velocity(0x5F);      //decrease  left motor velocity
 130   1              right_motor_velocity(0x2F);     //increase right motor velocity
 131   1      
 132   1      }
 133          /* Function name - right
 134          * Input - none 
 135          * Outut - turns the robot in right direction
 136          * Logic - set appropriate bits high to turn right as per the logic table
 137          */
 138          void right(void) //go right ( hard right)
 139          {
 140   1              RF=1;
 141   1              LF=1;
 142   1              RB=0;
 143   1              LB=0;
 144   1              left_motor_velocity(0x3F);      //increase left motor velocity 
 145   1              right_motor_velocity(0x5F);  //decrease  right motor velocity
 146   1      }
 147          /* Function name - stop
 148          * Input - none 
 149          * Outut - stops the robot
 150          * Logic - set appropriate bits high to stop all motors as per the logic table
 151          */
 152          void stop(void) //stop ( soft stop )
 153          {
 154   1              RF= 0;  
 155   1              LF= 0;
 156   1              RB= 0;
 157   1              LB= 0;
 158   1      }
 159          
 160          /*************************************************************************************
 161          * Function name - pca_init
 162          * Input - none
 163          * Output - none
 164          * Logic - initialise programmable counter array module to generate pwm. 
 165          *         The CCAPnH register holds the reload value. CCAPnL register increments,
 166          *         and is loaded with this value everytime it overflows,thus the value in
 167          *         CCAPnH can be changed to change the motor velocity
 168          ***************************************************************************************/
 169          void pca_init(void)
 170          {
 171   1       CMOD=0x80;        //80 sets PCA counter to run at Fosc/6; 
 172   1       CCON=0x40;        //start PCA counter
 173   1                                                      
 174   1       CCAP0L=0x00;   
 175   1       CCAP0H=0xFF;  //Left motor duty cycle register
C51 COMPILER V9.01   LINE_FOLLOWER1                                                        06/12/2015 16:56:31 PAGE 4   

 176   1        
 177   1       CCAP1L=0x00;                             
 178   1       CCAP1H=0xFF;  //Right motor duty cycle register
 179   1      
 180   1       CCAPM0=0x42;  //enable PWM mode and ECOM bits for left motor
 181   1       CCAPM1=0x42;  //enable PWM mode and ECOM bits for right motor
 182   1      }
 183          
 184          /*
 185          * Function Name: main
 186          * Input: None
 187          * Output: int to inform the caller that the program exited correctly or
 188          * incorrectly (C code standard)
 189          * Logic: constantly monitors the white line sensors value and checks all conditions to accordingly adjusts
             - its path.
 190          * Example Call: Called automatically by the Operating System
 191          *
 192          */
 193          void main()
 194          {
 195   1              unsigned int left_sensor_value=0;       //variable to store left sensor value
 196   1              unsigned int middle_sensor_value=0;     //variable to store middle sensor value
 197   1              unsigned int right_sensor_value=0;      //variable to store right sensor value
 198   1              
 199   1              unsigned char i=0;
 200   1              output_enable = 0;
 201   1              start_conv = 0;    //de-assert all control signals to ADC
 202   1       
 203   1              lcd_init(); //Initialize LCD
 204   1              pca_init();
 205   1              lcd_clear();
 206   1              
 207   1              forward(); //moves forward 
 208   1       
 209   1       while(1)
 210   1       {
 211   2              left_sensor_value=ADC_conversion(4); 
 212   2              middle_sensor_value=ADC_conversion(5);
 213   2              right_sensor_value=ADC_conversion(6);
 214   2              
 215   2              lcd_print(1,1,left_sensor_value,3);
 216   2              lcd_print(1,6,middle_sensor_value,3);
 217   2              lcd_print(1,11,right_sensor_value,3);
 218   2              lcd_print(2,1,flag,1);
 219   2              flag=0;          //reset the flag to 0
 220   2      
 221   2              if((left_sensor_value>50 && middle_sensor_value<20 && right_sensor_value>50 && flag==0) ||(left_sensor_va
             -lue<20 && middle_sensor_value>50 && right_sensor_value<20 && flag==0)) //checks if middle sensor is on white line and re
             -st two on black or viceversa
 222   2              {
 223   3                      flag=1; //set the flag to 1 so that further white line sensor comparision is disabled
 224   3                      forward();  //left and right motor is at same velocity
 225   3              }
 226   2              if(left_sensor_value<50 && right_sensor_value>50 && flag==0 && middle_sensor_value<20) //if it deviates t
             -owards right and on white line
 227   2              {
 228   3                      flag=1; //set the flag to 1 so that further white line sensor comparision is disabled
 229   3                      left(); //soft left turn by varying velocity
 230   3                      while(left_sensor_value>50);
 231   3              }
 232   2              if(left_sensor_value>50 && right_sensor_value<50 && flag==0 && middle_sensor_value<20) //if it deviates t
             -owards left and on white line
C51 COMPILER V9.01   LINE_FOLLOWER1                                                        06/12/2015 16:56:31 PAGE 5   

 233   2              {
 234   3                      flag=1; //set the flag to 1 so that further white line sensor comparision is disabled
 235   3                      right(); //soft right turn by varying velocity
 236   3                      while(right_sensor_value>50);
 237   3              }
 238   2              if(left_sensor_value>20 && right_sensor_value<20 && flag==0 && middle_sensor_value>50) //if it deviates t
             -owards right and on black line
 239   2              {
 240   3                      flag=1; //set the flag to 1 so that further white line sensor comparision is disabled
 241   3                      left(); //soft left turn by varying velocity
 242   3                      while(left_sensor_value<20);
 243   3              }
 244   2              if(left_sensor_value<20 && right_sensor_value>20 && flag==0 && middle_sensor_value>50) //if it deviates t
             -owards left and on black line
 245   2              {
 246   3                      flag=1; //set the flag to 1 so that further white line sensor comparision is disabled
 247   3                      right(); //soft right turn by varying velocity
 248   3                      while(right_sensor_value<20);
 249   3              }
 250   2              if((left_sensor_value>50 && middle_sensor_value>50 && right_sensor_value>50 && flag==0)||(left_sensor_val
             -ue<20 && middle_sensor_value<20 && right_sensor_value<20 && flag==0)) //if all sensors are on black or on white
 251   2                      stop();  //stops
 252   2              }
 253   1      }//main ends here


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1313    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
