C51 COMPILER V9.01   OBSTACLE_DETECTION_USING_PROXIMITY_SENSOR                             06/12/2015 11:05:21 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE OBSTACLE_DETECTION_USING_PROXIMITY_SENSOR
OBJECT MODULE PLACED IN obstacle_detection_using_proximity_sensor.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE obstacle_detection_using_proximity_sensor.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          * Author: Bhumika Varshney, ERTS Lab, IIT Bombay
   3          * File name: obstacle_detection_using_proximity_sensor.c
   4          * Functions: ADC_conversion(unsigned char ADC_channel_number), forward(), stop(), 
   5          *            left_mtor_velocity(unsigned char vel), right_mtor_velocity(unsigned char vel), pca_init()
   6          * Global variable: start_conv, output_enable, unsigned char i, left_velocity, right_velocity, LF, LB, RF, 
             -RB
   7          * Description: This experiment demonstrates use of proximity sensor in detecting an obstacle.
   8          * Concepts covered: Sensors and ADC interfacing 
   9            
  10           Note: 
  11           1. Make sure that in the configuration options following settings are 
  12           done for proper operation of the code
  13            Microcontroller: P89V51RD2
  14           Frequency: 11.0592 MHz                                                    
  15           2. Coding Standards followed(For further reference on Coding Standards go to portal link).
  16          **********************************************************************************************************
             -********/
  17          #include <intrins.h>
  18          #include "p89v51rx2.H"
  19          #include "lcd_display.h"
  20          
  21          //The appropriate bits have been defined as per the logic table for motion control
  22          sbit left_velocity=P1^3;
  23          sbit right_velocity=P1^4;
  24          sbit LB=P1^0;
  25          sbit LF=P1^1;
  26          sbit RF=P1^2;
  27          sbit RB=P3^4;
  28          sbit start_conv = P3^6;          //P3^6 is connected to Start and ALE pin of ADC0808
  29          sbit output_enable = P3^7;      //P3^7 is connected to Output Enable Pin of ADC0808
  30          
  31          unsigned char i=0;         //used in main function during ADC conversion 
  32          
  33          /********************************************************************************
  34                  Function: ADC_conversion
  35                  Input: ADC_channel_number
  36                  Output: Digital equivalent of analog data
  37                  Description: This function performs ADC conversion of a channel number 
  38                                           that is passed to it. The return value of this function contains 
  39                                           digital data of the selected channel.
  40                             
  41                                           Analog Sensor Pin Mapping
  42            
  43                           IN0-----> IR Proximity sensor 3 (front)
  44                                           IN1-----> Batt. Voltage
  45                                           IN2-----> Front Sharp IR Range sensor
  46                                           IN3-----> IR Proximity sensor 2 (left side)
  47                                           IN4-----> Left Whiteline
  48                                           IN5-----> Center Whiteline
  49                                           IN6-----> Right Whiteline
  50                                           IN7-----> IR Proximity sensor 4 (right side)
  51          ********************************************************************************/
  52          unsigned char ADC_conversion(unsigned char ADC_ch_no)
  53          {
C51 COMPILER V9.01   OBSTACLE_DETECTION_USING_PROXIMITY_SENSOR                             06/12/2015 11:05:21 PAGE 2   

  54   1              unsigned char ADC_data;
  55   1      
  56   1              P0 = ADC_ch_no;         // to select channel no. send address on P0
  57   1                                                              
  58   1              start_conv = 1;         // ADC0808 will latch the address on L-H transition on the ALE pin
  59   1              start_conv = 0;         // ADC0808 will start conversion on H-L transition on the start pin
  60   1              delay_ms(2);            // conversion time for ADC0808
  61   1      
  62   1              P0 =0xFF;               // output enable and read
  63   1              output_enable = 1;      //Enabling o/p of ADC0808 for to read the converted data
  64   1              ADC_data = P0;          //storing adc_data
  65   1              output_enable = 0;      //disabling ADC 0808 o/p
  66   1              return ADC_data;        //returning adc_data
  67   1      }
  68          
  69          /**************************************************************************************************
  70          Function name - left_motor_vel
  71          * Input - compare velocity in hexadecimal
  72          * Output - none
  73          * Logic - changes contents of the capture register in order to change velocity
  74          *          ,set left motor with velocity vel(compare value)
  75          * Note - 0x00 will give full (100% duty cycle) velocity, while 0xFF will give zero (0% duty cycle)
  76          *        velocity. Any value in between 0x00 and 0xFF will give intermediate velocity.
  77          ****************************************************************************************************/
  78          void left_motor_velocity(unsigned char vel)
  79          {
  80   1              CCAP0H=vel;
  81   1      }
  82          
  83          /**************************************************************************************************
  84          Function name - right_motor_vel
  85          * Input - compare velocity in hexadecimal
  86          * Output - none
  87          * Logic - changes contents of the capture register in order to change velocity
  88          *          ,set right motor with velocity vel(compare value)
  89          * Note - 0x00 will give full (100% duty cycle) velocity, while 0xFF will give zero (0% duty cycle)
  90          *        velocity. Any value in between 0x00 and 0xFF will give intermediate velocity.
  91          ****************************************************************************************************/
  92          void right_motor_velocity(unsigned char vel)
  93          {
  94   1              CCAP1H=vel;
  95   1      }
  96          
  97          /* Function name - forward
  98          * Input - none 
  99          * Output - moves the robot in forward direction
 100          * Logic - set appropriate bits high to move backward as per the logic table
 101          */
 102          void forward(void) //go forward
 103          {
 104   1      RF=1;
 105   1      LF=1;
 106   1      RB=0;
 107   1      LB=0;
 108   1      }
 109          /* Function name - stop
 110          * Input - none 
 111          * Output - stops the robot
 112          * Logic - set appropriate bits high to stop all motors as per the logic table
 113          */
 114          void stop(void) //stop ( soft stop )
 115          {
C51 COMPILER V9.01   OBSTACLE_DETECTION_USING_PROXIMITY_SENSOR                             06/12/2015 11:05:21 PAGE 3   

 116   1      RF= 0;
 117   1      LF= 0;
 118   1      RB= 0;
 119   1      LB= 0;
 120   1      }
 121          
 122          /*************************************************************************************
 123          * Function name - pca_init
 124          * Input - none
 125          * Output - none
 126          * Logic - initialise programmable counter array module to generate pwm. 
 127          *         The CCAPnH register holds the reload value. CCAPnL register increments,
 128          *         and is loaded with this value everytime it overflows,thus the value in
 129          *         CCAPnH can be changed to change the motor velocity
 130          ***************************************************************************************/
 131          void pca_init(void)
 132          {
 133   1       CMOD=0x80;        //80 sets PCA counter to run at Fosc/6; 
 134   1       CCON=0x40;        //start PCA counter
 135   1                                                      
 136   1       CCAP0L=0x00;   
 137   1       CCAP0H=0xFF;  //Left motor duty cycle register
 138   1        
 139   1       CCAP1L=0x00;                             
 140   1       CCAP1H=0xFF;  //Right motor duty cycle register
 141   1      
 142   1       CCAPM0=0x42;  //enable PWM mode and ECOM bits for left motor
 143   1       CCAPM1=0x42;  //enable PWM mode and ECOM bits for right motor
 144   1      }
 145          
 146          /*
 147          * Function Name: main
 148          * Input: None
 149          * Output: int to inform the caller that the program exited correctly or
 150          * incorrectly (C code standard)
 151          * Logic: constantly monitors the sensor value and blows buzzer above a defined threshold value. 
 152          * Example Call: Called automatically by the Operating System
 153          *
 154          */
 155          void main()
 156          {
 157   1              unsigned int sensor2_value=0; //variable to store proximity sensor2 value
 158   1              unsigned int sensor3_value=0; //variable to store proximity sensor3 value
 159   1              unsigned int sensor4_value=0; //variable to store proximity sensor4 value
 160   1              unsigned char i=0;
 161   1              output_enable = 0;
 162   1              start_conv = 0;    //de-assert all control signals to ADC
 163   1       
 164   1              buzzer = 1;     //buzzer off
 165   1              lcd_init();     //Initialize LCD
 166   1              pca_init();             //initialize PCA for velocity control
 167   1              lcd_clear();    //clears LCD
 168   1              forward();
 169   1              left_motor_velocity(0x2F);                      
 170   1              right_motor_velocity(0x2F);
 171   1       while(1)
 172   1       {
 173   2              sensor2_value=ADC_conversion(3);
 174   2              sensor3_value=ADC_conversion(0);
 175   2              sensor4_value=ADC_conversion(7);
 176   2              
 177   2              lcd_print(1,1,sensor2_value,3);
C51 COMPILER V9.01   OBSTACLE_DETECTION_USING_PROXIMITY_SENSOR                             06/12/2015 11:05:21 PAGE 4   

 178   2              lcd_print(1,5,sensor3_value,3);
 179   2              lcd_print(1,9,sensor4_value,3);
 180   2              
 181   2              if(sensor2_value<50 || sensor3_value<50 || sensor4_value<50) //obstacle detected
 182   2              {
 183   3              stop();
 184   3              delay_ms(1000);
 185   3              buzzer=0;       //buzzer on
 186   3              delay_ms(2000);  
 187   3              buzzer=1;       //buzzer off    
 188   3              break; 
 189   3              }                       
 190   2       }
 191   1      } //main ends here


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    934    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
