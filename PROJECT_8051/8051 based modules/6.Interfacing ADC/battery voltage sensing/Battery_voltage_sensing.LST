C51 COMPILER V9.01   BATTERY_VOLTAGE_SENSING                                               06/11/2015 14:35:50 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE BATTERY_VOLTAGE_SENSING
OBJECT MODULE PLACED IN Battery_voltage_sensing.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Battery_voltage_sensing.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2          * Author: Bhumika Varshney, ERTS Lab, IIT Bombay
   3          * File name: Battery_voltage_sensing.c
   4          * Functions: ADC_conversion(unsigned char ADC_channel_number), forward(), backward(), right(),
   5          *            left(), stop(), buzzer_operation(), lcd_operation(), motor_operation()
   6          * Global variable: start_conv, output_enable, unsigned char i, unsigned char initial_battery_voltage,
   7          *                  unsigned char final_battery_voltage, left_velocity, right_velocity, LF, LB, RF, RB
   8          * Description: This experiment demonstrates use of battery voltage sensors to monitor the power consumptio
             -n
   9          *              of the robot during various activities such as locomotion, buzzer and LCD operation.
  10          * Concepts covered: Sensors and ADC interfacing 
  11            
  12           Note: 
  13           1. Make sure that in the configuration options following settings are 
  14           done for proper operation of the code
  15            Microcontroller: P89V51RD2
  16           Frequency: 11.0592 MHz 
  17           2. This code displays ADC converted battery status. To calculate voltage from the ADC’s digital value we 
             -can use
  18           following formula:
  19               V Battery = 0.7V + (ADC value * 0.06149)                                              
  20           3. Coding Standards followed(For further reference on Coding Standards go to portal link).
  21          **********************************************************************************************************
             -********/
  22          #include <intrins.h>
  23          #include "p89v51rx2.H"
  24          #include "lcd_display.h"
  25          
  26          sbit start_conv = P3^6;          //P3^6 is connected to Start and ALE pin of ADC0808
  27          sbit output_enable = P3^7;      //P3^7 is connected to Output Enable Pin of ADC0808
  28          //The appropriate bits have been defined as per the logic table for motion control
  29          sbit left_velocity=P1^3;
  30          sbit right_velocity=P1^4;
  31          sbit LB=P1^0;
  32          sbit LF=P1^1;
  33          sbit RF=P1^2;
  34          sbit RB=P3^4;
  35          
  36          unsigned char i=0;  //used in main function during ADC conversion 
  37          unsigned char initial_battery_voltage=0; //variable to store battery status
  38          unsigned char final_battery_voltage=0;   //variable to store battery status
  39          
  40          /********************************************************************************
  41                  Function: ADC_conversion
  42                  Input: ADC_channel_number
  43                  Output: Digital equivalent of analog data
  44                  Description: This function performs ADC conversion of a channel number 
  45                                           that is passed to it. The return value of this function contains 
  46                                           digital data of the selected channel.
  47                             
  48                                           Analog Sensor Pin Mapping
  49            
  50                           IN0-----> IR Proximity sensor 3 (front)
  51                                           IN1-----> Batt. Voltage
  52                                           IN2-----> Front Sharp IR Range sensor
C51 COMPILER V9.01   BATTERY_VOLTAGE_SENSING                                               06/11/2015 14:35:50 PAGE 2   

  53                                           IN3-----> IR Proximity sensor 2 (left side)
  54                                           IN4-----> Left Whiteline
  55                                           IN5-----> Center Whiteline
  56                                           IN6-----> Right Whiteline
  57                                           IN7-----> IR Proximity sensor 4 (right side)
  58          ********************************************************************************/
  59          unsigned char ADC_conversion(unsigned char ADC_ch_no)
  60          {
  61   1      unsigned char ADC_data;
  62   1      
  63   1      P0 = ADC_ch_no;           // to select channel no. send address on P0
  64   1      
  65   1      start_conv = 1; // ADC0808 will latch the address on L-H transition on the ALE pin
  66   1      start_conv = 0; // ADC0808 will start conversion on H-L transition on the start pin
  67   1      delay_ms(2);    // conversion time for ADC0808
  68   1      
  69   1      P0 =0xFF;               // output enable and read
  70   1      output_enable = 1;      //Enabling o/p of ADC0808 for to read the converted data
  71   1      ADC_data = P0;          //storing adc_data
  72   1      output_enable = 0;      //disabling ADC 0808 o/p
  73   1      return ADC_data;        //returning adc_data
  74   1      }
  75          /* Function name - forward
  76          * Input - none 
  77          * Output - moves the robot in forward direction
  78          * Logic - set appropriate bits high to move backward as per the logic table
  79          */
  80          
  81          void forward(void) //go forward
  82          {
  83   1      RF=1;
  84   1      LF=1;
  85   1      RB=0;
  86   1      LB=0;
  87   1      }
  88          /* Function name - backward
  89          * Input - none 
  90          * Output - moves the robot in backward direction
  91          * Logic - set appropriate bits high to move backward as per the logic table
  92          */
  93          void backward(void) //go backward
  94          {
  95   1      RF=0;
  96   1      LF=0;
  97   1      RB=1;
  98   1      LB=1;
  99   1      }
 100          /* Function name - left
 101          * Input - none 
 102          * Output - turns the robot in left direction
 103          * Logic - set appropriate bits high to turn left as per the logic table
 104          */
 105          void left(void) //go left ( hard left)
 106          {
 107   1      RF=1;
 108   1      LF=0;
 109   1      RB=0;
 110   1      LB=1;
 111   1      }
 112          /* Function name - right
 113          * Input - none 
 114          * Output - turns the robot in right direction
C51 COMPILER V9.01   BATTERY_VOLTAGE_SENSING                                               06/11/2015 14:35:50 PAGE 3   

 115          * Logic - set appropriate bits high to turn right as per the logic table
 116          */
 117          void right(void) //go right ( hard right)
 118          {
 119   1      RF=0;
 120   1      LF=1;
 121   1      RB=1;
 122   1      LB=0;
 123   1      }
 124          /* Function name - stop
 125          * Input - none 
 126          * Output - stops the robot
 127          * Logic - set appropriate bits high to stop all motors as per the logic table
 128          */
 129          void stop(void) //stop ( soft stop )
 130          {
 131   1      RF= 0;
 132   1      LF= 0;
 133   1      RB= 0;
 134   1      LB= 0;
 135   1      }
 136          /*************************************************************
 137          * Function name - buzzer_operation
 138          * Input - none 
 139          * Output - buzzer beeps
 140          * Logic - blows buzzer for specified time delays
 141          *************************************************************/    
 142          void buzzer_operation()
 143          {
 144   1              while(i<3)
 145   1        {
 146   2              buzzer=0;
 147   2              delay_ms(1000);
 148   2              buzzer=1;
 149   2              delay_ms(500);
 150   2              i++;
 151   2        }     
 152   1      }
 153          /******************************************************************
 154          * Function name - lcd_operation
 155          * Input - none 
 156          * Output- diplayed words on LCD for finite time delays
 157          * Logic - displays few strings on LCD screen by calling various lcd
 158          *         related functions. 
 159          ********************************************************************/
 160          
 161          void lcd_operation()
 162          {
 163   1              lcd_clear();
 164   1              lcd_string("LCD operation");
 165   1              delay_ms(1000);
 166   1              lcd_clear();
 167   1              lcd_cursor(1,4);
 168   1              lcd_string("Firebird V");
 169   1              lcd_cursor(2,5);
 170   1              lcd_string("E-yantra");
 171   1              delay_ms(2000);   
 172   1      }
 173          /******************************************************************
 174          * Function name - motor_operation
 175          * Input - none 
 176          * Output- motion of robot
C51 COMPILER V9.01   BATTERY_VOLTAGE_SENSING                                               06/11/2015 14:35:50 PAGE 4   

 177          * Logic - calls functions to move robot forward, backward, right, 
 178          *         left and stop. 
 179          ********************************************************************/
 180          void motor_operation()
 181          {
 182   1      /*here maximum velocity has been set for both the motors but to vary it one can apply PWM signal on these 
             -2 pins*/
 183   1      left_velocity=1;      
 184   1      right_velocity=1;        
 185   1      forward(); //go forward
 186   1      delay_ms(2000); //delay of 2 seconds
 187   1      stop(); //stop
 188   1      backward(); //go backward
 189   1      delay_ms(1000); //delay of 1 seconds
 190   1      stop(); //stop
 191   1      right(); //go left
 192   1      delay_ms(3000); //delay of 3 seconds
 193   1      stop(); //stop
 194   1      left(); //go right
 195   1      delay_ms(3000); //delay of 3 seconds
 196   1      stop(); //stop
 197   1      }
 198          /*
 199          * Function Name: main
 200          * Input: None
 201          * Output: int to inform the caller that the program exited correctly or incorrectly (C code standard)
 202          * Logic: stores battery status at various levels and executes the desired operation to be performed.
 203          * Example Call: Called automatically by the Operating System
 204          *
 205          */
 206          void main()
 207          {
 208   1       unsigned char initial_battery_voltage=0;
 209   1       unsigned char final_battery_voltage=0;
 210   1       unsigned char i=0;
 211   1       output_enable = 0;
 212   1       start_conv = 0;    //de-assert all control signals to ADC
 213   1      
 214   1       initial_battery_voltage= ADC_conversion(1);
 215   1       lcd_init(); //Initialize LCD
 216   1       lcd_clear();
 217   1       lcd_cursor(1,1);
 218   1       lcd_string("Initial battery");
 219   1       lcd_cursor(2,1);
 220   1       lcd_string("Voltage=");
 221   1       lcd_print(2,10,initial_battery_voltage,3);
 222   1       delay_ms(2500);
 223   1       
 224   1              motor_operation();
 225   1       
 226   1       final_battery_voltage= ADC_conversion(1);
 227   1       lcd_clear();                                                                                                           
 228   1       lcd_cursor(1,1);
 229   1       lcd_string("Final battery");
 230   1       lcd_cursor(2,1);
 231   1       lcd_string("Voltage=");
 232   1       lcd_print(2,10,final_battery_voltage,3);
 233   1       while(1);
 234   1      }//main ends here


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.01   BATTERY_VOLTAGE_SENSING                                               06/11/2015 14:35:50 PAGE 5   

   CODE SIZE        =   1018    ----
   CONSTANT SIZE    =     79    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
